/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package net.lightapi.portal.config;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class ConfigProductVersionUpdatedEvent extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 2557915911183267793L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ConfigProductVersionUpdatedEvent\",\"namespace\":\"net.lightapi.portal.config\",\"fields\":[{\"name\":\"EventId\",\"type\":{\"type\":\"record\",\"name\":\"EventId\",\"namespace\":\"com.networknt.kafka.common\",\"fields\":[{\"name\":\"id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"a unique identifier for the event\"},{\"name\":\"userId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"the user who creates the event\"},{\"name\":\"hostId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"the host which is the event is created\"},{\"name\":\"nonce\",\"type\":\"long\",\"doc\":\"the number of the transactions for the user\"},{\"name\":\"timestamp\",\"type\":\"long\",\"doc\":\"time the event is recorded\",\"default\":0},{\"name\":\"derived\",\"type\":\"boolean\",\"doc\":\"indicate if the event is derived from event processor\",\"default\":false}]}},{\"name\":\"productId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"product id\"},{\"name\":\"productVersion\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"product version\"},{\"name\":\"configId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"configuration id\"},{\"name\":\"propertyName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"property name\"},{\"name\":\"value\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"optional fields in json\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<ConfigProductVersionUpdatedEvent> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<ConfigProductVersionUpdatedEvent> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<ConfigProductVersionUpdatedEvent> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<ConfigProductVersionUpdatedEvent> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<ConfigProductVersionUpdatedEvent> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this ConfigProductVersionUpdatedEvent to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a ConfigProductVersionUpdatedEvent from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a ConfigProductVersionUpdatedEvent instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static ConfigProductVersionUpdatedEvent fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private com.networknt.kafka.common.EventId EventId;
  /** product id */
  private java.lang.String productId;
  /** product version */
  private java.lang.String productVersion;
  /** configuration id */
  private java.lang.String configId;
  /** property name */
  private java.lang.String propertyName;
  /** optional fields in json */
  private java.lang.String value;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ConfigProductVersionUpdatedEvent() {}

  /**
   * All-args constructor.
   * @param EventId The new value for EventId
   * @param productId product id
   * @param productVersion product version
   * @param configId configuration id
   * @param propertyName property name
   * @param value optional fields in json
   */
  public ConfigProductVersionUpdatedEvent(com.networknt.kafka.common.EventId EventId, java.lang.String productId, java.lang.String productVersion, java.lang.String configId, java.lang.String propertyName, java.lang.String value) {
    this.EventId = EventId;
    this.productId = productId;
    this.productVersion = productVersion;
    this.configId = configId;
    this.propertyName = propertyName;
    this.value = value;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return EventId;
    case 1: return productId;
    case 2: return productVersion;
    case 3: return configId;
    case 4: return propertyName;
    case 5: return value;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: EventId = (com.networknt.kafka.common.EventId)value$; break;
    case 1: productId = value$ != null ? value$.toString() : null; break;
    case 2: productVersion = value$ != null ? value$.toString() : null; break;
    case 3: configId = value$ != null ? value$.toString() : null; break;
    case 4: propertyName = value$ != null ? value$.toString() : null; break;
    case 5: value = value$ != null ? value$.toString() : null; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'EventId' field.
   * @return The value of the 'EventId' field.
   */
  public com.networknt.kafka.common.EventId getEventId() {
    return EventId;
  }


  /**
   * Sets the value of the 'EventId' field.
   * @param value the value to set.
   */
  public void setEventId(com.networknt.kafka.common.EventId value) {
    this.EventId = value;
  }

  /**
   * Gets the value of the 'productId' field.
   * @return product id
   */
  public java.lang.String getProductId() {
    return productId;
  }


  /**
   * Sets the value of the 'productId' field.
   * product id
   * @param value the value to set.
   */
  public void setProductId(java.lang.String value) {
    this.productId = value;
  }

  /**
   * Gets the value of the 'productVersion' field.
   * @return product version
   */
  public java.lang.String getProductVersion() {
    return productVersion;
  }


  /**
   * Sets the value of the 'productVersion' field.
   * product version
   * @param value the value to set.
   */
  public void setProductVersion(java.lang.String value) {
    this.productVersion = value;
  }

  /**
   * Gets the value of the 'configId' field.
   * @return configuration id
   */
  public java.lang.String getConfigId() {
    return configId;
  }


  /**
   * Sets the value of the 'configId' field.
   * configuration id
   * @param value the value to set.
   */
  public void setConfigId(java.lang.String value) {
    this.configId = value;
  }

  /**
   * Gets the value of the 'propertyName' field.
   * @return property name
   */
  public java.lang.String getPropertyName() {
    return propertyName;
  }


  /**
   * Sets the value of the 'propertyName' field.
   * property name
   * @param value the value to set.
   */
  public void setPropertyName(java.lang.String value) {
    this.propertyName = value;
  }

  /**
   * Gets the value of the 'value' field.
   * @return optional fields in json
   */
  public java.lang.String getValue() {
    return value;
  }


  /**
   * Sets the value of the 'value' field.
   * optional fields in json
   * @param value the value to set.
   */
  public void setValue(java.lang.String value) {
    this.value = value;
  }

  /**
   * Creates a new ConfigProductVersionUpdatedEvent RecordBuilder.
   * @return A new ConfigProductVersionUpdatedEvent RecordBuilder
   */
  public static net.lightapi.portal.config.ConfigProductVersionUpdatedEvent.Builder newBuilder() {
    return new net.lightapi.portal.config.ConfigProductVersionUpdatedEvent.Builder();
  }

  /**
   * Creates a new ConfigProductVersionUpdatedEvent RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ConfigProductVersionUpdatedEvent RecordBuilder
   */
  public static net.lightapi.portal.config.ConfigProductVersionUpdatedEvent.Builder newBuilder(net.lightapi.portal.config.ConfigProductVersionUpdatedEvent.Builder other) {
    if (other == null) {
      return new net.lightapi.portal.config.ConfigProductVersionUpdatedEvent.Builder();
    } else {
      return new net.lightapi.portal.config.ConfigProductVersionUpdatedEvent.Builder(other);
    }
  }

  /**
   * Creates a new ConfigProductVersionUpdatedEvent RecordBuilder by copying an existing ConfigProductVersionUpdatedEvent instance.
   * @param other The existing instance to copy.
   * @return A new ConfigProductVersionUpdatedEvent RecordBuilder
   */
  public static net.lightapi.portal.config.ConfigProductVersionUpdatedEvent.Builder newBuilder(net.lightapi.portal.config.ConfigProductVersionUpdatedEvent other) {
    if (other == null) {
      return new net.lightapi.portal.config.ConfigProductVersionUpdatedEvent.Builder();
    } else {
      return new net.lightapi.portal.config.ConfigProductVersionUpdatedEvent.Builder(other);
    }
  }

  /**
   * RecordBuilder for ConfigProductVersionUpdatedEvent instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ConfigProductVersionUpdatedEvent>
    implements org.apache.avro.data.RecordBuilder<ConfigProductVersionUpdatedEvent> {

    private com.networknt.kafka.common.EventId EventId;
    private com.networknt.kafka.common.EventId.Builder EventIdBuilder;
    /** product id */
    private java.lang.String productId;
    /** product version */
    private java.lang.String productVersion;
    /** configuration id */
    private java.lang.String configId;
    /** property name */
    private java.lang.String propertyName;
    /** optional fields in json */
    private java.lang.String value;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(net.lightapi.portal.config.ConfigProductVersionUpdatedEvent.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.EventId)) {
        this.EventId = data().deepCopy(fields()[0].schema(), other.EventId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (other.hasEventIdBuilder()) {
        this.EventIdBuilder = com.networknt.kafka.common.EventId.newBuilder(other.getEventIdBuilder());
      }
      if (isValidValue(fields()[1], other.productId)) {
        this.productId = data().deepCopy(fields()[1].schema(), other.productId);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.productVersion)) {
        this.productVersion = data().deepCopy(fields()[2].schema(), other.productVersion);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.configId)) {
        this.configId = data().deepCopy(fields()[3].schema(), other.configId);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.propertyName)) {
        this.propertyName = data().deepCopy(fields()[4].schema(), other.propertyName);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.value)) {
        this.value = data().deepCopy(fields()[5].schema(), other.value);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
    }

    /**
     * Creates a Builder by copying an existing ConfigProductVersionUpdatedEvent instance
     * @param other The existing instance to copy.
     */
    private Builder(net.lightapi.portal.config.ConfigProductVersionUpdatedEvent other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.EventId)) {
        this.EventId = data().deepCopy(fields()[0].schema(), other.EventId);
        fieldSetFlags()[0] = true;
      }
      this.EventIdBuilder = null;
      if (isValidValue(fields()[1], other.productId)) {
        this.productId = data().deepCopy(fields()[1].schema(), other.productId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.productVersion)) {
        this.productVersion = data().deepCopy(fields()[2].schema(), other.productVersion);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.configId)) {
        this.configId = data().deepCopy(fields()[3].schema(), other.configId);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.propertyName)) {
        this.propertyName = data().deepCopy(fields()[4].schema(), other.propertyName);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.value)) {
        this.value = data().deepCopy(fields()[5].schema(), other.value);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'EventId' field.
      * @return The value.
      */
    public com.networknt.kafka.common.EventId getEventId() {
      return EventId;
    }


    /**
      * Sets the value of the 'EventId' field.
      * @param value The value of 'EventId'.
      * @return This builder.
      */
    public net.lightapi.portal.config.ConfigProductVersionUpdatedEvent.Builder setEventId(com.networknt.kafka.common.EventId value) {
      validate(fields()[0], value);
      this.EventIdBuilder = null;
      this.EventId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'EventId' field has been set.
      * @return True if the 'EventId' field has been set, false otherwise.
      */
    public boolean hasEventId() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'EventId' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.networknt.kafka.common.EventId.Builder getEventIdBuilder() {
      if (EventIdBuilder == null) {
        if (hasEventId()) {
          setEventIdBuilder(com.networknt.kafka.common.EventId.newBuilder(EventId));
        } else {
          setEventIdBuilder(com.networknt.kafka.common.EventId.newBuilder());
        }
      }
      return EventIdBuilder;
    }

    /**
     * Sets the Builder instance for the 'EventId' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public net.lightapi.portal.config.ConfigProductVersionUpdatedEvent.Builder setEventIdBuilder(com.networknt.kafka.common.EventId.Builder value) {
      clearEventId();
      EventIdBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'EventId' field has an active Builder instance
     * @return True if the 'EventId' field has an active Builder instance
     */
    public boolean hasEventIdBuilder() {
      return EventIdBuilder != null;
    }

    /**
      * Clears the value of the 'EventId' field.
      * @return This builder.
      */
    public net.lightapi.portal.config.ConfigProductVersionUpdatedEvent.Builder clearEventId() {
      EventId = null;
      EventIdBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'productId' field.
      * product id
      * @return The value.
      */
    public java.lang.String getProductId() {
      return productId;
    }


    /**
      * Sets the value of the 'productId' field.
      * product id
      * @param value The value of 'productId'.
      * @return This builder.
      */
    public net.lightapi.portal.config.ConfigProductVersionUpdatedEvent.Builder setProductId(java.lang.String value) {
      validate(fields()[1], value);
      this.productId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'productId' field has been set.
      * product id
      * @return True if the 'productId' field has been set, false otherwise.
      */
    public boolean hasProductId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'productId' field.
      * product id
      * @return This builder.
      */
    public net.lightapi.portal.config.ConfigProductVersionUpdatedEvent.Builder clearProductId() {
      productId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'productVersion' field.
      * product version
      * @return The value.
      */
    public java.lang.String getProductVersion() {
      return productVersion;
    }


    /**
      * Sets the value of the 'productVersion' field.
      * product version
      * @param value The value of 'productVersion'.
      * @return This builder.
      */
    public net.lightapi.portal.config.ConfigProductVersionUpdatedEvent.Builder setProductVersion(java.lang.String value) {
      validate(fields()[2], value);
      this.productVersion = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'productVersion' field has been set.
      * product version
      * @return True if the 'productVersion' field has been set, false otherwise.
      */
    public boolean hasProductVersion() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'productVersion' field.
      * product version
      * @return This builder.
      */
    public net.lightapi.portal.config.ConfigProductVersionUpdatedEvent.Builder clearProductVersion() {
      productVersion = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'configId' field.
      * configuration id
      * @return The value.
      */
    public java.lang.String getConfigId() {
      return configId;
    }


    /**
      * Sets the value of the 'configId' field.
      * configuration id
      * @param value The value of 'configId'.
      * @return This builder.
      */
    public net.lightapi.portal.config.ConfigProductVersionUpdatedEvent.Builder setConfigId(java.lang.String value) {
      validate(fields()[3], value);
      this.configId = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'configId' field has been set.
      * configuration id
      * @return True if the 'configId' field has been set, false otherwise.
      */
    public boolean hasConfigId() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'configId' field.
      * configuration id
      * @return This builder.
      */
    public net.lightapi.portal.config.ConfigProductVersionUpdatedEvent.Builder clearConfigId() {
      configId = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'propertyName' field.
      * property name
      * @return The value.
      */
    public java.lang.String getPropertyName() {
      return propertyName;
    }


    /**
      * Sets the value of the 'propertyName' field.
      * property name
      * @param value The value of 'propertyName'.
      * @return This builder.
      */
    public net.lightapi.portal.config.ConfigProductVersionUpdatedEvent.Builder setPropertyName(java.lang.String value) {
      validate(fields()[4], value);
      this.propertyName = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'propertyName' field has been set.
      * property name
      * @return True if the 'propertyName' field has been set, false otherwise.
      */
    public boolean hasPropertyName() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'propertyName' field.
      * property name
      * @return This builder.
      */
    public net.lightapi.portal.config.ConfigProductVersionUpdatedEvent.Builder clearPropertyName() {
      propertyName = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'value' field.
      * optional fields in json
      * @return The value.
      */
    public java.lang.String getValue() {
      return value;
    }


    /**
      * Sets the value of the 'value' field.
      * optional fields in json
      * @param value The value of 'value'.
      * @return This builder.
      */
    public net.lightapi.portal.config.ConfigProductVersionUpdatedEvent.Builder setValue(java.lang.String value) {
      validate(fields()[5], value);
      this.value = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'value' field has been set.
      * optional fields in json
      * @return True if the 'value' field has been set, false otherwise.
      */
    public boolean hasValue() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'value' field.
      * optional fields in json
      * @return This builder.
      */
    public net.lightapi.portal.config.ConfigProductVersionUpdatedEvent.Builder clearValue() {
      value = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public ConfigProductVersionUpdatedEvent build() {
      try {
        ConfigProductVersionUpdatedEvent record = new ConfigProductVersionUpdatedEvent();
        if (EventIdBuilder != null) {
          try {
            record.EventId = this.EventIdBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("EventId"));
            throw e;
          }
        } else {
          record.EventId = fieldSetFlags()[0] ? this.EventId : (com.networknt.kafka.common.EventId) defaultValue(fields()[0]);
        }
        record.productId = fieldSetFlags()[1] ? this.productId : (java.lang.String) defaultValue(fields()[1]);
        record.productVersion = fieldSetFlags()[2] ? this.productVersion : (java.lang.String) defaultValue(fields()[2]);
        record.configId = fieldSetFlags()[3] ? this.configId : (java.lang.String) defaultValue(fields()[3]);
        record.propertyName = fieldSetFlags()[4] ? this.propertyName : (java.lang.String) defaultValue(fields()[4]);
        record.value = fieldSetFlags()[5] ? this.value : (java.lang.String) defaultValue(fields()[5]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<ConfigProductVersionUpdatedEvent>
    WRITER$ = (org.apache.avro.io.DatumWriter<ConfigProductVersionUpdatedEvent>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<ConfigProductVersionUpdatedEvent>
    READER$ = (org.apache.avro.io.DatumReader<ConfigProductVersionUpdatedEvent>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    this.EventId.customEncode(out);

    out.writeString(this.productId);

    out.writeString(this.productVersion);

    out.writeString(this.configId);

    out.writeString(this.propertyName);

    out.writeString(this.value);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (this.EventId == null) {
        this.EventId = new com.networknt.kafka.common.EventId();
      }
      this.EventId.customDecode(in);

      this.productId = in.readString();

      this.productVersion = in.readString();

      this.configId = in.readString();

      this.propertyName = in.readString();

      this.value = in.readString();

    } else {
      for (int i = 0; i < 6; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (this.EventId == null) {
            this.EventId = new com.networknt.kafka.common.EventId();
          }
          this.EventId.customDecode(in);
          break;

        case 1:
          this.productId = in.readString();
          break;

        case 2:
          this.productVersion = in.readString();
          break;

        case 3:
          this.configId = in.readString();
          break;

        case 4:
          this.propertyName = in.readString();
          break;

        case 5:
          this.value = in.readString();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}

/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package net.lightapi.portal.user;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class RefRelaCreatedEvent extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -8142247556252874907L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"RefRelaCreatedEvent\",\"namespace\":\"net.lightapi.portal.user\",\"fields\":[{\"name\":\"EventId\",\"type\":{\"type\":\"record\",\"name\":\"EventId\",\"namespace\":\"com.networknt.kafka.common\",\"fields\":[{\"name\":\"id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"a unique identifier for the event\"},{\"name\":\"userId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"the user who creates the event\"},{\"name\":\"hostId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"the host which is the event is created\"},{\"name\":\"nonce\",\"type\":\"long\",\"doc\":\"the number of the transactions for the user\"},{\"name\":\"timestamp\",\"type\":\"long\",\"doc\":\"time the event is recorded\",\"default\":0},{\"name\":\"derived\",\"type\":\"boolean\",\"doc\":\"indicate if the event is derived from event processor\",\"default\":false}]}},{\"name\":\"hostId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"host id\"},{\"name\":\"rela\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"reference rela name\"},{\"name\":\"language\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"value label language\"},{\"name\":\"from\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"From value of the relationship\"},{\"name\":\"value\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"reference value\"},{\"name\":\"label\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"value label in language\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<RefRelaCreatedEvent> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<RefRelaCreatedEvent> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<RefRelaCreatedEvent> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<RefRelaCreatedEvent> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<RefRelaCreatedEvent> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this RefRelaCreatedEvent to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a RefRelaCreatedEvent from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a RefRelaCreatedEvent instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static RefRelaCreatedEvent fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private com.networknt.kafka.common.EventId EventId;
  /** host id */
  private java.lang.String hostId;
  /** reference rela name */
  private java.lang.String rela;
  /** value label language */
  private java.lang.String language;
  /** From value of the relationship */
  private java.lang.String from;
  /** reference value */
  private java.lang.String value;
  /** value label in language */
  private java.lang.String label;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public RefRelaCreatedEvent() {}

  /**
   * All-args constructor.
   * @param EventId The new value for EventId
   * @param hostId host id
   * @param rela reference rela name
   * @param language value label language
   * @param from From value of the relationship
   * @param value reference value
   * @param label value label in language
   */
  public RefRelaCreatedEvent(com.networknt.kafka.common.EventId EventId, java.lang.String hostId, java.lang.String rela, java.lang.String language, java.lang.String from, java.lang.String value, java.lang.String label) {
    this.EventId = EventId;
    this.hostId = hostId;
    this.rela = rela;
    this.language = language;
    this.from = from;
    this.value = value;
    this.label = label;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return EventId;
    case 1: return hostId;
    case 2: return rela;
    case 3: return language;
    case 4: return from;
    case 5: return value;
    case 6: return label;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: EventId = (com.networknt.kafka.common.EventId)value$; break;
    case 1: hostId = value$ != null ? value$.toString() : null; break;
    case 2: rela = value$ != null ? value$.toString() : null; break;
    case 3: language = value$ != null ? value$.toString() : null; break;
    case 4: from = value$ != null ? value$.toString() : null; break;
    case 5: value = value$ != null ? value$.toString() : null; break;
    case 6: label = value$ != null ? value$.toString() : null; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'EventId' field.
   * @return The value of the 'EventId' field.
   */
  public com.networknt.kafka.common.EventId getEventId() {
    return EventId;
  }


  /**
   * Sets the value of the 'EventId' field.
   * @param value the value to set.
   */
  public void setEventId(com.networknt.kafka.common.EventId value) {
    this.EventId = value;
  }

  /**
   * Gets the value of the 'hostId' field.
   * @return host id
   */
  public java.lang.String getHostId() {
    return hostId;
  }


  /**
   * Sets the value of the 'hostId' field.
   * host id
   * @param value the value to set.
   */
  public void setHostId(java.lang.String value) {
    this.hostId = value;
  }

  /**
   * Gets the value of the 'rela' field.
   * @return reference rela name
   */
  public java.lang.String getRela() {
    return rela;
  }


  /**
   * Sets the value of the 'rela' field.
   * reference rela name
   * @param value the value to set.
   */
  public void setRela(java.lang.String value) {
    this.rela = value;
  }

  /**
   * Gets the value of the 'language' field.
   * @return value label language
   */
  public java.lang.String getLanguage() {
    return language;
  }


  /**
   * Sets the value of the 'language' field.
   * value label language
   * @param value the value to set.
   */
  public void setLanguage(java.lang.String value) {
    this.language = value;
  }

  /**
   * Gets the value of the 'from' field.
   * @return From value of the relationship
   */
  public java.lang.String getFrom() {
    return from;
  }


  /**
   * Sets the value of the 'from' field.
   * From value of the relationship
   * @param value the value to set.
   */
  public void setFrom(java.lang.String value) {
    this.from = value;
  }

  /**
   * Gets the value of the 'value' field.
   * @return reference value
   */
  public java.lang.String getValue() {
    return value;
  }


  /**
   * Sets the value of the 'value' field.
   * reference value
   * @param value the value to set.
   */
  public void setValue(java.lang.String value) {
    this.value = value;
  }

  /**
   * Gets the value of the 'label' field.
   * @return value label in language
   */
  public java.lang.String getLabel() {
    return label;
  }


  /**
   * Sets the value of the 'label' field.
   * value label in language
   * @param value the value to set.
   */
  public void setLabel(java.lang.String value) {
    this.label = value;
  }

  /**
   * Creates a new RefRelaCreatedEvent RecordBuilder.
   * @return A new RefRelaCreatedEvent RecordBuilder
   */
  public static net.lightapi.portal.user.RefRelaCreatedEvent.Builder newBuilder() {
    return new net.lightapi.portal.user.RefRelaCreatedEvent.Builder();
  }

  /**
   * Creates a new RefRelaCreatedEvent RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new RefRelaCreatedEvent RecordBuilder
   */
  public static net.lightapi.portal.user.RefRelaCreatedEvent.Builder newBuilder(net.lightapi.portal.user.RefRelaCreatedEvent.Builder other) {
    if (other == null) {
      return new net.lightapi.portal.user.RefRelaCreatedEvent.Builder();
    } else {
      return new net.lightapi.portal.user.RefRelaCreatedEvent.Builder(other);
    }
  }

  /**
   * Creates a new RefRelaCreatedEvent RecordBuilder by copying an existing RefRelaCreatedEvent instance.
   * @param other The existing instance to copy.
   * @return A new RefRelaCreatedEvent RecordBuilder
   */
  public static net.lightapi.portal.user.RefRelaCreatedEvent.Builder newBuilder(net.lightapi.portal.user.RefRelaCreatedEvent other) {
    if (other == null) {
      return new net.lightapi.portal.user.RefRelaCreatedEvent.Builder();
    } else {
      return new net.lightapi.portal.user.RefRelaCreatedEvent.Builder(other);
    }
  }

  /**
   * RecordBuilder for RefRelaCreatedEvent instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<RefRelaCreatedEvent>
    implements org.apache.avro.data.RecordBuilder<RefRelaCreatedEvent> {

    private com.networknt.kafka.common.EventId EventId;
    private com.networknt.kafka.common.EventId.Builder EventIdBuilder;
    /** host id */
    private java.lang.String hostId;
    /** reference rela name */
    private java.lang.String rela;
    /** value label language */
    private java.lang.String language;
    /** From value of the relationship */
    private java.lang.String from;
    /** reference value */
    private java.lang.String value;
    /** value label in language */
    private java.lang.String label;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(net.lightapi.portal.user.RefRelaCreatedEvent.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.EventId)) {
        this.EventId = data().deepCopy(fields()[0].schema(), other.EventId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (other.hasEventIdBuilder()) {
        this.EventIdBuilder = com.networknt.kafka.common.EventId.newBuilder(other.getEventIdBuilder());
      }
      if (isValidValue(fields()[1], other.hostId)) {
        this.hostId = data().deepCopy(fields()[1].schema(), other.hostId);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.rela)) {
        this.rela = data().deepCopy(fields()[2].schema(), other.rela);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.language)) {
        this.language = data().deepCopy(fields()[3].schema(), other.language);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.from)) {
        this.from = data().deepCopy(fields()[4].schema(), other.from);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.value)) {
        this.value = data().deepCopy(fields()[5].schema(), other.value);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.label)) {
        this.label = data().deepCopy(fields()[6].schema(), other.label);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
    }

    /**
     * Creates a Builder by copying an existing RefRelaCreatedEvent instance
     * @param other The existing instance to copy.
     */
    private Builder(net.lightapi.portal.user.RefRelaCreatedEvent other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.EventId)) {
        this.EventId = data().deepCopy(fields()[0].schema(), other.EventId);
        fieldSetFlags()[0] = true;
      }
      this.EventIdBuilder = null;
      if (isValidValue(fields()[1], other.hostId)) {
        this.hostId = data().deepCopy(fields()[1].schema(), other.hostId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.rela)) {
        this.rela = data().deepCopy(fields()[2].schema(), other.rela);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.language)) {
        this.language = data().deepCopy(fields()[3].schema(), other.language);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.from)) {
        this.from = data().deepCopy(fields()[4].schema(), other.from);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.value)) {
        this.value = data().deepCopy(fields()[5].schema(), other.value);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.label)) {
        this.label = data().deepCopy(fields()[6].schema(), other.label);
        fieldSetFlags()[6] = true;
      }
    }

    /**
      * Gets the value of the 'EventId' field.
      * @return The value.
      */
    public com.networknt.kafka.common.EventId getEventId() {
      return EventId;
    }


    /**
      * Sets the value of the 'EventId' field.
      * @param value The value of 'EventId'.
      * @return This builder.
      */
    public net.lightapi.portal.user.RefRelaCreatedEvent.Builder setEventId(com.networknt.kafka.common.EventId value) {
      validate(fields()[0], value);
      this.EventIdBuilder = null;
      this.EventId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'EventId' field has been set.
      * @return True if the 'EventId' field has been set, false otherwise.
      */
    public boolean hasEventId() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'EventId' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.networknt.kafka.common.EventId.Builder getEventIdBuilder() {
      if (EventIdBuilder == null) {
        if (hasEventId()) {
          setEventIdBuilder(com.networknt.kafka.common.EventId.newBuilder(EventId));
        } else {
          setEventIdBuilder(com.networknt.kafka.common.EventId.newBuilder());
        }
      }
      return EventIdBuilder;
    }

    /**
     * Sets the Builder instance for the 'EventId' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public net.lightapi.portal.user.RefRelaCreatedEvent.Builder setEventIdBuilder(com.networknt.kafka.common.EventId.Builder value) {
      clearEventId();
      EventIdBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'EventId' field has an active Builder instance
     * @return True if the 'EventId' field has an active Builder instance
     */
    public boolean hasEventIdBuilder() {
      return EventIdBuilder != null;
    }

    /**
      * Clears the value of the 'EventId' field.
      * @return This builder.
      */
    public net.lightapi.portal.user.RefRelaCreatedEvent.Builder clearEventId() {
      EventId = null;
      EventIdBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'hostId' field.
      * host id
      * @return The value.
      */
    public java.lang.String getHostId() {
      return hostId;
    }


    /**
      * Sets the value of the 'hostId' field.
      * host id
      * @param value The value of 'hostId'.
      * @return This builder.
      */
    public net.lightapi.portal.user.RefRelaCreatedEvent.Builder setHostId(java.lang.String value) {
      validate(fields()[1], value);
      this.hostId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'hostId' field has been set.
      * host id
      * @return True if the 'hostId' field has been set, false otherwise.
      */
    public boolean hasHostId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'hostId' field.
      * host id
      * @return This builder.
      */
    public net.lightapi.portal.user.RefRelaCreatedEvent.Builder clearHostId() {
      hostId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'rela' field.
      * reference rela name
      * @return The value.
      */
    public java.lang.String getRela() {
      return rela;
    }


    /**
      * Sets the value of the 'rela' field.
      * reference rela name
      * @param value The value of 'rela'.
      * @return This builder.
      */
    public net.lightapi.portal.user.RefRelaCreatedEvent.Builder setRela(java.lang.String value) {
      validate(fields()[2], value);
      this.rela = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'rela' field has been set.
      * reference rela name
      * @return True if the 'rela' field has been set, false otherwise.
      */
    public boolean hasRela() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'rela' field.
      * reference rela name
      * @return This builder.
      */
    public net.lightapi.portal.user.RefRelaCreatedEvent.Builder clearRela() {
      rela = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'language' field.
      * value label language
      * @return The value.
      */
    public java.lang.String getLanguage() {
      return language;
    }


    /**
      * Sets the value of the 'language' field.
      * value label language
      * @param value The value of 'language'.
      * @return This builder.
      */
    public net.lightapi.portal.user.RefRelaCreatedEvent.Builder setLanguage(java.lang.String value) {
      validate(fields()[3], value);
      this.language = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'language' field has been set.
      * value label language
      * @return True if the 'language' field has been set, false otherwise.
      */
    public boolean hasLanguage() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'language' field.
      * value label language
      * @return This builder.
      */
    public net.lightapi.portal.user.RefRelaCreatedEvent.Builder clearLanguage() {
      language = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'from' field.
      * From value of the relationship
      * @return The value.
      */
    public java.lang.String getFrom() {
      return from;
    }


    /**
      * Sets the value of the 'from' field.
      * From value of the relationship
      * @param value The value of 'from'.
      * @return This builder.
      */
    public net.lightapi.portal.user.RefRelaCreatedEvent.Builder setFrom(java.lang.String value) {
      validate(fields()[4], value);
      this.from = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'from' field has been set.
      * From value of the relationship
      * @return True if the 'from' field has been set, false otherwise.
      */
    public boolean hasFrom() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'from' field.
      * From value of the relationship
      * @return This builder.
      */
    public net.lightapi.portal.user.RefRelaCreatedEvent.Builder clearFrom() {
      from = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'value' field.
      * reference value
      * @return The value.
      */
    public java.lang.String getValue() {
      return value;
    }


    /**
      * Sets the value of the 'value' field.
      * reference value
      * @param value The value of 'value'.
      * @return This builder.
      */
    public net.lightapi.portal.user.RefRelaCreatedEvent.Builder setValue(java.lang.String value) {
      validate(fields()[5], value);
      this.value = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'value' field has been set.
      * reference value
      * @return True if the 'value' field has been set, false otherwise.
      */
    public boolean hasValue() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'value' field.
      * reference value
      * @return This builder.
      */
    public net.lightapi.portal.user.RefRelaCreatedEvent.Builder clearValue() {
      value = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'label' field.
      * value label in language
      * @return The value.
      */
    public java.lang.String getLabel() {
      return label;
    }


    /**
      * Sets the value of the 'label' field.
      * value label in language
      * @param value The value of 'label'.
      * @return This builder.
      */
    public net.lightapi.portal.user.RefRelaCreatedEvent.Builder setLabel(java.lang.String value) {
      validate(fields()[6], value);
      this.label = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'label' field has been set.
      * value label in language
      * @return True if the 'label' field has been set, false otherwise.
      */
    public boolean hasLabel() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'label' field.
      * value label in language
      * @return This builder.
      */
    public net.lightapi.portal.user.RefRelaCreatedEvent.Builder clearLabel() {
      label = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public RefRelaCreatedEvent build() {
      try {
        RefRelaCreatedEvent record = new RefRelaCreatedEvent();
        if (EventIdBuilder != null) {
          try {
            record.EventId = this.EventIdBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("EventId"));
            throw e;
          }
        } else {
          record.EventId = fieldSetFlags()[0] ? this.EventId : (com.networknt.kafka.common.EventId) defaultValue(fields()[0]);
        }
        record.hostId = fieldSetFlags()[1] ? this.hostId : (java.lang.String) defaultValue(fields()[1]);
        record.rela = fieldSetFlags()[2] ? this.rela : (java.lang.String) defaultValue(fields()[2]);
        record.language = fieldSetFlags()[3] ? this.language : (java.lang.String) defaultValue(fields()[3]);
        record.from = fieldSetFlags()[4] ? this.from : (java.lang.String) defaultValue(fields()[4]);
        record.value = fieldSetFlags()[5] ? this.value : (java.lang.String) defaultValue(fields()[5]);
        record.label = fieldSetFlags()[6] ? this.label : (java.lang.String) defaultValue(fields()[6]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<RefRelaCreatedEvent>
    WRITER$ = (org.apache.avro.io.DatumWriter<RefRelaCreatedEvent>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<RefRelaCreatedEvent>
    READER$ = (org.apache.avro.io.DatumReader<RefRelaCreatedEvent>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    this.EventId.customEncode(out);

    out.writeString(this.hostId);

    out.writeString(this.rela);

    out.writeString(this.language);

    out.writeString(this.from);

    out.writeString(this.value);

    out.writeString(this.label);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (this.EventId == null) {
        this.EventId = new com.networknt.kafka.common.EventId();
      }
      this.EventId.customDecode(in);

      this.hostId = in.readString();

      this.rela = in.readString();

      this.language = in.readString();

      this.from = in.readString();

      this.value = in.readString();

      this.label = in.readString();

    } else {
      for (int i = 0; i < 7; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (this.EventId == null) {
            this.EventId = new com.networknt.kafka.common.EventId();
          }
          this.EventId.customDecode(in);
          break;

        case 1:
          this.hostId = in.readString();
          break;

        case 2:
          this.rela = in.readString();
          break;

        case 3:
          this.language = in.readString();
          break;

        case 4:
          this.from = in.readString();
          break;

        case 5:
          this.value = in.readString();
          break;

        case 6:
          this.label = in.readString();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}

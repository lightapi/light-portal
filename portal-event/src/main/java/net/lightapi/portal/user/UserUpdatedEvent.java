/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package net.lightapi.portal.user;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class UserUpdatedEvent extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -4455548883143070860L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"UserUpdatedEvent\",\"namespace\":\"net.lightapi.portal.user\",\"fields\":[{\"name\":\"EventId\",\"type\":{\"type\":\"record\",\"name\":\"EventId\",\"namespace\":\"com.networknt.kafka.common\",\"fields\":[{\"name\":\"id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"a unique identifier\"},{\"name\":\"nonce\",\"type\":\"long\",\"doc\":\"the number of the transactions for the id\"},{\"name\":\"timestamp\",\"type\":\"long\",\"doc\":\"time the event is recorded\",\"default\":0},{\"name\":\"derived\",\"type\":\"boolean\",\"doc\":\"indicate if the event is derived from event processor\",\"default\":false}]}},{\"name\":\"hostId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"host id\"},{\"name\":\"email\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"email address of the updated user\"},{\"name\":\"userId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"a unique user id\"},{\"name\":\"language\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"the preferred language of the user\"},{\"name\":\"value\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"user detail in JSON, include firstName, lastName, gender, birthday, postCode, address\",\"default\":null},{\"name\":\"taijiWallet\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"taiji blockchain address of the user\",\"default\":null},{\"name\":\"country\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"country of the user\",\"default\":null},{\"name\":\"province\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"province of the user\",\"default\":null},{\"name\":\"city\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"city of the user\",\"default\":null},{\"name\":\"oldCountry\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"old country of the user, used to move the maproot\",\"default\":null},{\"name\":\"oldProvince\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"old province of the user, used to move the maproot\",\"default\":null},{\"name\":\"oldCity\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"old city of the user, used to move the maproot\",\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<UserUpdatedEvent> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<UserUpdatedEvent> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<UserUpdatedEvent> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<UserUpdatedEvent> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<UserUpdatedEvent> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this UserUpdatedEvent to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a UserUpdatedEvent from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a UserUpdatedEvent instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static UserUpdatedEvent fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private com.networknt.kafka.common.EventId EventId;
  /** host id */
  private java.lang.String hostId;
  /** email address of the updated user */
  private java.lang.String email;
  /** a unique user id */
  private java.lang.String userId;
  /** the preferred language of the user */
  private java.lang.String language;
  /** user detail in JSON, include firstName, lastName, gender, birthday, postCode, address */
  private java.lang.String value;
  /** taiji blockchain address of the user */
  private java.lang.String taijiWallet;
  /** country of the user */
  private java.lang.String country;
  /** province of the user */
  private java.lang.String province;
  /** city of the user */
  private java.lang.String city;
  /** old country of the user, used to move the maproot */
  private java.lang.String oldCountry;
  /** old province of the user, used to move the maproot */
  private java.lang.String oldProvince;
  /** old city of the user, used to move the maproot */
  private java.lang.String oldCity;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public UserUpdatedEvent() {}

  /**
   * All-args constructor.
   * @param EventId The new value for EventId
   * @param hostId host id
   * @param email email address of the updated user
   * @param userId a unique user id
   * @param language the preferred language of the user
   * @param value user detail in JSON, include firstName, lastName, gender, birthday, postCode, address
   * @param taijiWallet taiji blockchain address of the user
   * @param country country of the user
   * @param province province of the user
   * @param city city of the user
   * @param oldCountry old country of the user, used to move the maproot
   * @param oldProvince old province of the user, used to move the maproot
   * @param oldCity old city of the user, used to move the maproot
   */
  public UserUpdatedEvent(com.networknt.kafka.common.EventId EventId, java.lang.String hostId, java.lang.String email, java.lang.String userId, java.lang.String language, java.lang.String value, java.lang.String taijiWallet, java.lang.String country, java.lang.String province, java.lang.String city, java.lang.String oldCountry, java.lang.String oldProvince, java.lang.String oldCity) {
    this.EventId = EventId;
    this.hostId = hostId;
    this.email = email;
    this.userId = userId;
    this.language = language;
    this.value = value;
    this.taijiWallet = taijiWallet;
    this.country = country;
    this.province = province;
    this.city = city;
    this.oldCountry = oldCountry;
    this.oldProvince = oldProvince;
    this.oldCity = oldCity;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return EventId;
    case 1: return hostId;
    case 2: return email;
    case 3: return userId;
    case 4: return language;
    case 5: return value;
    case 6: return taijiWallet;
    case 7: return country;
    case 8: return province;
    case 9: return city;
    case 10: return oldCountry;
    case 11: return oldProvince;
    case 12: return oldCity;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: EventId = (com.networknt.kafka.common.EventId)value$; break;
    case 1: hostId = value$ != null ? value$.toString() : null; break;
    case 2: email = value$ != null ? value$.toString() : null; break;
    case 3: userId = value$ != null ? value$.toString() : null; break;
    case 4: language = value$ != null ? value$.toString() : null; break;
    case 5: value = value$ != null ? value$.toString() : null; break;
    case 6: taijiWallet = value$ != null ? value$.toString() : null; break;
    case 7: country = value$ != null ? value$.toString() : null; break;
    case 8: province = value$ != null ? value$.toString() : null; break;
    case 9: city = value$ != null ? value$.toString() : null; break;
    case 10: oldCountry = value$ != null ? value$.toString() : null; break;
    case 11: oldProvince = value$ != null ? value$.toString() : null; break;
    case 12: oldCity = value$ != null ? value$.toString() : null; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'EventId' field.
   * @return The value of the 'EventId' field.
   */
  public com.networknt.kafka.common.EventId getEventId() {
    return EventId;
  }


  /**
   * Sets the value of the 'EventId' field.
   * @param value the value to set.
   */
  public void setEventId(com.networknt.kafka.common.EventId value) {
    this.EventId = value;
  }

  /**
   * Gets the value of the 'hostId' field.
   * @return host id
   */
  public java.lang.String getHostId() {
    return hostId;
  }


  /**
   * Sets the value of the 'hostId' field.
   * host id
   * @param value the value to set.
   */
  public void setHostId(java.lang.String value) {
    this.hostId = value;
  }

  /**
   * Gets the value of the 'email' field.
   * @return email address of the updated user
   */
  public java.lang.String getEmail() {
    return email;
  }


  /**
   * Sets the value of the 'email' field.
   * email address of the updated user
   * @param value the value to set.
   */
  public void setEmail(java.lang.String value) {
    this.email = value;
  }

  /**
   * Gets the value of the 'userId' field.
   * @return a unique user id
   */
  public java.lang.String getUserId() {
    return userId;
  }


  /**
   * Sets the value of the 'userId' field.
   * a unique user id
   * @param value the value to set.
   */
  public void setUserId(java.lang.String value) {
    this.userId = value;
  }

  /**
   * Gets the value of the 'language' field.
   * @return the preferred language of the user
   */
  public java.lang.String getLanguage() {
    return language;
  }


  /**
   * Sets the value of the 'language' field.
   * the preferred language of the user
   * @param value the value to set.
   */
  public void setLanguage(java.lang.String value) {
    this.language = value;
  }

  /**
   * Gets the value of the 'value' field.
   * @return user detail in JSON, include firstName, lastName, gender, birthday, postCode, address
   */
  public java.lang.String getValue() {
    return value;
  }


  /**
   * Sets the value of the 'value' field.
   * user detail in JSON, include firstName, lastName, gender, birthday, postCode, address
   * @param value the value to set.
   */
  public void setValue(java.lang.String value) {
    this.value = value;
  }

  /**
   * Gets the value of the 'taijiWallet' field.
   * @return taiji blockchain address of the user
   */
  public java.lang.String getTaijiWallet() {
    return taijiWallet;
  }


  /**
   * Sets the value of the 'taijiWallet' field.
   * taiji blockchain address of the user
   * @param value the value to set.
   */
  public void setTaijiWallet(java.lang.String value) {
    this.taijiWallet = value;
  }

  /**
   * Gets the value of the 'country' field.
   * @return country of the user
   */
  public java.lang.String getCountry() {
    return country;
  }


  /**
   * Sets the value of the 'country' field.
   * country of the user
   * @param value the value to set.
   */
  public void setCountry(java.lang.String value) {
    this.country = value;
  }

  /**
   * Gets the value of the 'province' field.
   * @return province of the user
   */
  public java.lang.String getProvince() {
    return province;
  }


  /**
   * Sets the value of the 'province' field.
   * province of the user
   * @param value the value to set.
   */
  public void setProvince(java.lang.String value) {
    this.province = value;
  }

  /**
   * Gets the value of the 'city' field.
   * @return city of the user
   */
  public java.lang.String getCity() {
    return city;
  }


  /**
   * Sets the value of the 'city' field.
   * city of the user
   * @param value the value to set.
   */
  public void setCity(java.lang.String value) {
    this.city = value;
  }

  /**
   * Gets the value of the 'oldCountry' field.
   * @return old country of the user, used to move the maproot
   */
  public java.lang.String getOldCountry() {
    return oldCountry;
  }


  /**
   * Sets the value of the 'oldCountry' field.
   * old country of the user, used to move the maproot
   * @param value the value to set.
   */
  public void setOldCountry(java.lang.String value) {
    this.oldCountry = value;
  }

  /**
   * Gets the value of the 'oldProvince' field.
   * @return old province of the user, used to move the maproot
   */
  public java.lang.String getOldProvince() {
    return oldProvince;
  }


  /**
   * Sets the value of the 'oldProvince' field.
   * old province of the user, used to move the maproot
   * @param value the value to set.
   */
  public void setOldProvince(java.lang.String value) {
    this.oldProvince = value;
  }

  /**
   * Gets the value of the 'oldCity' field.
   * @return old city of the user, used to move the maproot
   */
  public java.lang.String getOldCity() {
    return oldCity;
  }


  /**
   * Sets the value of the 'oldCity' field.
   * old city of the user, used to move the maproot
   * @param value the value to set.
   */
  public void setOldCity(java.lang.String value) {
    this.oldCity = value;
  }

  /**
   * Creates a new UserUpdatedEvent RecordBuilder.
   * @return A new UserUpdatedEvent RecordBuilder
   */
  public static net.lightapi.portal.user.UserUpdatedEvent.Builder newBuilder() {
    return new net.lightapi.portal.user.UserUpdatedEvent.Builder();
  }

  /**
   * Creates a new UserUpdatedEvent RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new UserUpdatedEvent RecordBuilder
   */
  public static net.lightapi.portal.user.UserUpdatedEvent.Builder newBuilder(net.lightapi.portal.user.UserUpdatedEvent.Builder other) {
    if (other == null) {
      return new net.lightapi.portal.user.UserUpdatedEvent.Builder();
    } else {
      return new net.lightapi.portal.user.UserUpdatedEvent.Builder(other);
    }
  }

  /**
   * Creates a new UserUpdatedEvent RecordBuilder by copying an existing UserUpdatedEvent instance.
   * @param other The existing instance to copy.
   * @return A new UserUpdatedEvent RecordBuilder
   */
  public static net.lightapi.portal.user.UserUpdatedEvent.Builder newBuilder(net.lightapi.portal.user.UserUpdatedEvent other) {
    if (other == null) {
      return new net.lightapi.portal.user.UserUpdatedEvent.Builder();
    } else {
      return new net.lightapi.portal.user.UserUpdatedEvent.Builder(other);
    }
  }

  /**
   * RecordBuilder for UserUpdatedEvent instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<UserUpdatedEvent>
    implements org.apache.avro.data.RecordBuilder<UserUpdatedEvent> {

    private com.networknt.kafka.common.EventId EventId;
    private com.networknt.kafka.common.EventId.Builder EventIdBuilder;
    /** host id */
    private java.lang.String hostId;
    /** email address of the updated user */
    private java.lang.String email;
    /** a unique user id */
    private java.lang.String userId;
    /** the preferred language of the user */
    private java.lang.String language;
    /** user detail in JSON, include firstName, lastName, gender, birthday, postCode, address */
    private java.lang.String value;
    /** taiji blockchain address of the user */
    private java.lang.String taijiWallet;
    /** country of the user */
    private java.lang.String country;
    /** province of the user */
    private java.lang.String province;
    /** city of the user */
    private java.lang.String city;
    /** old country of the user, used to move the maproot */
    private java.lang.String oldCountry;
    /** old province of the user, used to move the maproot */
    private java.lang.String oldProvince;
    /** old city of the user, used to move the maproot */
    private java.lang.String oldCity;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(net.lightapi.portal.user.UserUpdatedEvent.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.EventId)) {
        this.EventId = data().deepCopy(fields()[0].schema(), other.EventId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (other.hasEventIdBuilder()) {
        this.EventIdBuilder = com.networknt.kafka.common.EventId.newBuilder(other.getEventIdBuilder());
      }
      if (isValidValue(fields()[1], other.hostId)) {
        this.hostId = data().deepCopy(fields()[1].schema(), other.hostId);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.email)) {
        this.email = data().deepCopy(fields()[2].schema(), other.email);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.userId)) {
        this.userId = data().deepCopy(fields()[3].schema(), other.userId);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.language)) {
        this.language = data().deepCopy(fields()[4].schema(), other.language);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.value)) {
        this.value = data().deepCopy(fields()[5].schema(), other.value);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.taijiWallet)) {
        this.taijiWallet = data().deepCopy(fields()[6].schema(), other.taijiWallet);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.country)) {
        this.country = data().deepCopy(fields()[7].schema(), other.country);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.province)) {
        this.province = data().deepCopy(fields()[8].schema(), other.province);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.city)) {
        this.city = data().deepCopy(fields()[9].schema(), other.city);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.oldCountry)) {
        this.oldCountry = data().deepCopy(fields()[10].schema(), other.oldCountry);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
      if (isValidValue(fields()[11], other.oldProvince)) {
        this.oldProvince = data().deepCopy(fields()[11].schema(), other.oldProvince);
        fieldSetFlags()[11] = other.fieldSetFlags()[11];
      }
      if (isValidValue(fields()[12], other.oldCity)) {
        this.oldCity = data().deepCopy(fields()[12].schema(), other.oldCity);
        fieldSetFlags()[12] = other.fieldSetFlags()[12];
      }
    }

    /**
     * Creates a Builder by copying an existing UserUpdatedEvent instance
     * @param other The existing instance to copy.
     */
    private Builder(net.lightapi.portal.user.UserUpdatedEvent other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.EventId)) {
        this.EventId = data().deepCopy(fields()[0].schema(), other.EventId);
        fieldSetFlags()[0] = true;
      }
      this.EventIdBuilder = null;
      if (isValidValue(fields()[1], other.hostId)) {
        this.hostId = data().deepCopy(fields()[1].schema(), other.hostId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.email)) {
        this.email = data().deepCopy(fields()[2].schema(), other.email);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.userId)) {
        this.userId = data().deepCopy(fields()[3].schema(), other.userId);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.language)) {
        this.language = data().deepCopy(fields()[4].schema(), other.language);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.value)) {
        this.value = data().deepCopy(fields()[5].schema(), other.value);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.taijiWallet)) {
        this.taijiWallet = data().deepCopy(fields()[6].schema(), other.taijiWallet);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.country)) {
        this.country = data().deepCopy(fields()[7].schema(), other.country);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.province)) {
        this.province = data().deepCopy(fields()[8].schema(), other.province);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.city)) {
        this.city = data().deepCopy(fields()[9].schema(), other.city);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.oldCountry)) {
        this.oldCountry = data().deepCopy(fields()[10].schema(), other.oldCountry);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.oldProvince)) {
        this.oldProvince = data().deepCopy(fields()[11].schema(), other.oldProvince);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.oldCity)) {
        this.oldCity = data().deepCopy(fields()[12].schema(), other.oldCity);
        fieldSetFlags()[12] = true;
      }
    }

    /**
      * Gets the value of the 'EventId' field.
      * @return The value.
      */
    public com.networknt.kafka.common.EventId getEventId() {
      return EventId;
    }


    /**
      * Sets the value of the 'EventId' field.
      * @param value The value of 'EventId'.
      * @return This builder.
      */
    public net.lightapi.portal.user.UserUpdatedEvent.Builder setEventId(com.networknt.kafka.common.EventId value) {
      validate(fields()[0], value);
      this.EventIdBuilder = null;
      this.EventId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'EventId' field has been set.
      * @return True if the 'EventId' field has been set, false otherwise.
      */
    public boolean hasEventId() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'EventId' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.networknt.kafka.common.EventId.Builder getEventIdBuilder() {
      if (EventIdBuilder == null) {
        if (hasEventId()) {
          setEventIdBuilder(com.networknt.kafka.common.EventId.newBuilder(EventId));
        } else {
          setEventIdBuilder(com.networknt.kafka.common.EventId.newBuilder());
        }
      }
      return EventIdBuilder;
    }

    /**
     * Sets the Builder instance for the 'EventId' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public net.lightapi.portal.user.UserUpdatedEvent.Builder setEventIdBuilder(com.networknt.kafka.common.EventId.Builder value) {
      clearEventId();
      EventIdBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'EventId' field has an active Builder instance
     * @return True if the 'EventId' field has an active Builder instance
     */
    public boolean hasEventIdBuilder() {
      return EventIdBuilder != null;
    }

    /**
      * Clears the value of the 'EventId' field.
      * @return This builder.
      */
    public net.lightapi.portal.user.UserUpdatedEvent.Builder clearEventId() {
      EventId = null;
      EventIdBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'hostId' field.
      * host id
      * @return The value.
      */
    public java.lang.String getHostId() {
      return hostId;
    }


    /**
      * Sets the value of the 'hostId' field.
      * host id
      * @param value The value of 'hostId'.
      * @return This builder.
      */
    public net.lightapi.portal.user.UserUpdatedEvent.Builder setHostId(java.lang.String value) {
      validate(fields()[1], value);
      this.hostId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'hostId' field has been set.
      * host id
      * @return True if the 'hostId' field has been set, false otherwise.
      */
    public boolean hasHostId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'hostId' field.
      * host id
      * @return This builder.
      */
    public net.lightapi.portal.user.UserUpdatedEvent.Builder clearHostId() {
      hostId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'email' field.
      * email address of the updated user
      * @return The value.
      */
    public java.lang.String getEmail() {
      return email;
    }


    /**
      * Sets the value of the 'email' field.
      * email address of the updated user
      * @param value The value of 'email'.
      * @return This builder.
      */
    public net.lightapi.portal.user.UserUpdatedEvent.Builder setEmail(java.lang.String value) {
      validate(fields()[2], value);
      this.email = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'email' field has been set.
      * email address of the updated user
      * @return True if the 'email' field has been set, false otherwise.
      */
    public boolean hasEmail() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'email' field.
      * email address of the updated user
      * @return This builder.
      */
    public net.lightapi.portal.user.UserUpdatedEvent.Builder clearEmail() {
      email = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'userId' field.
      * a unique user id
      * @return The value.
      */
    public java.lang.String getUserId() {
      return userId;
    }


    /**
      * Sets the value of the 'userId' field.
      * a unique user id
      * @param value The value of 'userId'.
      * @return This builder.
      */
    public net.lightapi.portal.user.UserUpdatedEvent.Builder setUserId(java.lang.String value) {
      validate(fields()[3], value);
      this.userId = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'userId' field has been set.
      * a unique user id
      * @return True if the 'userId' field has been set, false otherwise.
      */
    public boolean hasUserId() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'userId' field.
      * a unique user id
      * @return This builder.
      */
    public net.lightapi.portal.user.UserUpdatedEvent.Builder clearUserId() {
      userId = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'language' field.
      * the preferred language of the user
      * @return The value.
      */
    public java.lang.String getLanguage() {
      return language;
    }


    /**
      * Sets the value of the 'language' field.
      * the preferred language of the user
      * @param value The value of 'language'.
      * @return This builder.
      */
    public net.lightapi.portal.user.UserUpdatedEvent.Builder setLanguage(java.lang.String value) {
      validate(fields()[4], value);
      this.language = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'language' field has been set.
      * the preferred language of the user
      * @return True if the 'language' field has been set, false otherwise.
      */
    public boolean hasLanguage() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'language' field.
      * the preferred language of the user
      * @return This builder.
      */
    public net.lightapi.portal.user.UserUpdatedEvent.Builder clearLanguage() {
      language = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'value' field.
      * user detail in JSON, include firstName, lastName, gender, birthday, postCode, address
      * @return The value.
      */
    public java.lang.String getValue() {
      return value;
    }


    /**
      * Sets the value of the 'value' field.
      * user detail in JSON, include firstName, lastName, gender, birthday, postCode, address
      * @param value The value of 'value'.
      * @return This builder.
      */
    public net.lightapi.portal.user.UserUpdatedEvent.Builder setValue(java.lang.String value) {
      validate(fields()[5], value);
      this.value = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'value' field has been set.
      * user detail in JSON, include firstName, lastName, gender, birthday, postCode, address
      * @return True if the 'value' field has been set, false otherwise.
      */
    public boolean hasValue() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'value' field.
      * user detail in JSON, include firstName, lastName, gender, birthday, postCode, address
      * @return This builder.
      */
    public net.lightapi.portal.user.UserUpdatedEvent.Builder clearValue() {
      value = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'taijiWallet' field.
      * taiji blockchain address of the user
      * @return The value.
      */
    public java.lang.String getTaijiWallet() {
      return taijiWallet;
    }


    /**
      * Sets the value of the 'taijiWallet' field.
      * taiji blockchain address of the user
      * @param value The value of 'taijiWallet'.
      * @return This builder.
      */
    public net.lightapi.portal.user.UserUpdatedEvent.Builder setTaijiWallet(java.lang.String value) {
      validate(fields()[6], value);
      this.taijiWallet = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'taijiWallet' field has been set.
      * taiji blockchain address of the user
      * @return True if the 'taijiWallet' field has been set, false otherwise.
      */
    public boolean hasTaijiWallet() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'taijiWallet' field.
      * taiji blockchain address of the user
      * @return This builder.
      */
    public net.lightapi.portal.user.UserUpdatedEvent.Builder clearTaijiWallet() {
      taijiWallet = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'country' field.
      * country of the user
      * @return The value.
      */
    public java.lang.String getCountry() {
      return country;
    }


    /**
      * Sets the value of the 'country' field.
      * country of the user
      * @param value The value of 'country'.
      * @return This builder.
      */
    public net.lightapi.portal.user.UserUpdatedEvent.Builder setCountry(java.lang.String value) {
      validate(fields()[7], value);
      this.country = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'country' field has been set.
      * country of the user
      * @return True if the 'country' field has been set, false otherwise.
      */
    public boolean hasCountry() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'country' field.
      * country of the user
      * @return This builder.
      */
    public net.lightapi.portal.user.UserUpdatedEvent.Builder clearCountry() {
      country = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'province' field.
      * province of the user
      * @return The value.
      */
    public java.lang.String getProvince() {
      return province;
    }


    /**
      * Sets the value of the 'province' field.
      * province of the user
      * @param value The value of 'province'.
      * @return This builder.
      */
    public net.lightapi.portal.user.UserUpdatedEvent.Builder setProvince(java.lang.String value) {
      validate(fields()[8], value);
      this.province = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'province' field has been set.
      * province of the user
      * @return True if the 'province' field has been set, false otherwise.
      */
    public boolean hasProvince() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'province' field.
      * province of the user
      * @return This builder.
      */
    public net.lightapi.portal.user.UserUpdatedEvent.Builder clearProvince() {
      province = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'city' field.
      * city of the user
      * @return The value.
      */
    public java.lang.String getCity() {
      return city;
    }


    /**
      * Sets the value of the 'city' field.
      * city of the user
      * @param value The value of 'city'.
      * @return This builder.
      */
    public net.lightapi.portal.user.UserUpdatedEvent.Builder setCity(java.lang.String value) {
      validate(fields()[9], value);
      this.city = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'city' field has been set.
      * city of the user
      * @return True if the 'city' field has been set, false otherwise.
      */
    public boolean hasCity() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'city' field.
      * city of the user
      * @return This builder.
      */
    public net.lightapi.portal.user.UserUpdatedEvent.Builder clearCity() {
      city = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'oldCountry' field.
      * old country of the user, used to move the maproot
      * @return The value.
      */
    public java.lang.String getOldCountry() {
      return oldCountry;
    }


    /**
      * Sets the value of the 'oldCountry' field.
      * old country of the user, used to move the maproot
      * @param value The value of 'oldCountry'.
      * @return This builder.
      */
    public net.lightapi.portal.user.UserUpdatedEvent.Builder setOldCountry(java.lang.String value) {
      validate(fields()[10], value);
      this.oldCountry = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'oldCountry' field has been set.
      * old country of the user, used to move the maproot
      * @return True if the 'oldCountry' field has been set, false otherwise.
      */
    public boolean hasOldCountry() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'oldCountry' field.
      * old country of the user, used to move the maproot
      * @return This builder.
      */
    public net.lightapi.portal.user.UserUpdatedEvent.Builder clearOldCountry() {
      oldCountry = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'oldProvince' field.
      * old province of the user, used to move the maproot
      * @return The value.
      */
    public java.lang.String getOldProvince() {
      return oldProvince;
    }


    /**
      * Sets the value of the 'oldProvince' field.
      * old province of the user, used to move the maproot
      * @param value The value of 'oldProvince'.
      * @return This builder.
      */
    public net.lightapi.portal.user.UserUpdatedEvent.Builder setOldProvince(java.lang.String value) {
      validate(fields()[11], value);
      this.oldProvince = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'oldProvince' field has been set.
      * old province of the user, used to move the maproot
      * @return True if the 'oldProvince' field has been set, false otherwise.
      */
    public boolean hasOldProvince() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'oldProvince' field.
      * old province of the user, used to move the maproot
      * @return This builder.
      */
    public net.lightapi.portal.user.UserUpdatedEvent.Builder clearOldProvince() {
      oldProvince = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'oldCity' field.
      * old city of the user, used to move the maproot
      * @return The value.
      */
    public java.lang.String getOldCity() {
      return oldCity;
    }


    /**
      * Sets the value of the 'oldCity' field.
      * old city of the user, used to move the maproot
      * @param value The value of 'oldCity'.
      * @return This builder.
      */
    public net.lightapi.portal.user.UserUpdatedEvent.Builder setOldCity(java.lang.String value) {
      validate(fields()[12], value);
      this.oldCity = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'oldCity' field has been set.
      * old city of the user, used to move the maproot
      * @return True if the 'oldCity' field has been set, false otherwise.
      */
    public boolean hasOldCity() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'oldCity' field.
      * old city of the user, used to move the maproot
      * @return This builder.
      */
    public net.lightapi.portal.user.UserUpdatedEvent.Builder clearOldCity() {
      oldCity = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public UserUpdatedEvent build() {
      try {
        UserUpdatedEvent record = new UserUpdatedEvent();
        if (EventIdBuilder != null) {
          try {
            record.EventId = this.EventIdBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("EventId"));
            throw e;
          }
        } else {
          record.EventId = fieldSetFlags()[0] ? this.EventId : (com.networknt.kafka.common.EventId) defaultValue(fields()[0]);
        }
        record.hostId = fieldSetFlags()[1] ? this.hostId : (java.lang.String) defaultValue(fields()[1]);
        record.email = fieldSetFlags()[2] ? this.email : (java.lang.String) defaultValue(fields()[2]);
        record.userId = fieldSetFlags()[3] ? this.userId : (java.lang.String) defaultValue(fields()[3]);
        record.language = fieldSetFlags()[4] ? this.language : (java.lang.String) defaultValue(fields()[4]);
        record.value = fieldSetFlags()[5] ? this.value : (java.lang.String) defaultValue(fields()[5]);
        record.taijiWallet = fieldSetFlags()[6] ? this.taijiWallet : (java.lang.String) defaultValue(fields()[6]);
        record.country = fieldSetFlags()[7] ? this.country : (java.lang.String) defaultValue(fields()[7]);
        record.province = fieldSetFlags()[8] ? this.province : (java.lang.String) defaultValue(fields()[8]);
        record.city = fieldSetFlags()[9] ? this.city : (java.lang.String) defaultValue(fields()[9]);
        record.oldCountry = fieldSetFlags()[10] ? this.oldCountry : (java.lang.String) defaultValue(fields()[10]);
        record.oldProvince = fieldSetFlags()[11] ? this.oldProvince : (java.lang.String) defaultValue(fields()[11]);
        record.oldCity = fieldSetFlags()[12] ? this.oldCity : (java.lang.String) defaultValue(fields()[12]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<UserUpdatedEvent>
    WRITER$ = (org.apache.avro.io.DatumWriter<UserUpdatedEvent>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<UserUpdatedEvent>
    READER$ = (org.apache.avro.io.DatumReader<UserUpdatedEvent>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    this.EventId.customEncode(out);

    out.writeString(this.hostId);

    out.writeString(this.email);

    out.writeString(this.userId);

    out.writeString(this.language);

    if (this.value == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.value);
    }

    if (this.taijiWallet == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.taijiWallet);
    }

    if (this.country == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.country);
    }

    if (this.province == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.province);
    }

    if (this.city == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.city);
    }

    if (this.oldCountry == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.oldCountry);
    }

    if (this.oldProvince == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.oldProvince);
    }

    if (this.oldCity == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.oldCity);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (this.EventId == null) {
        this.EventId = new com.networknt.kafka.common.EventId();
      }
      this.EventId.customDecode(in);

      this.hostId = in.readString();

      this.email = in.readString();

      this.userId = in.readString();

      this.language = in.readString();

      if (in.readIndex() != 1) {
        in.readNull();
        this.value = null;
      } else {
        this.value = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.taijiWallet = null;
      } else {
        this.taijiWallet = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.country = null;
      } else {
        this.country = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.province = null;
      } else {
        this.province = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.city = null;
      } else {
        this.city = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.oldCountry = null;
      } else {
        this.oldCountry = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.oldProvince = null;
      } else {
        this.oldProvince = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.oldCity = null;
      } else {
        this.oldCity = in.readString();
      }

    } else {
      for (int i = 0; i < 13; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (this.EventId == null) {
            this.EventId = new com.networknt.kafka.common.EventId();
          }
          this.EventId.customDecode(in);
          break;

        case 1:
          this.hostId = in.readString();
          break;

        case 2:
          this.email = in.readString();
          break;

        case 3:
          this.userId = in.readString();
          break;

        case 4:
          this.language = in.readString();
          break;

        case 5:
          if (in.readIndex() != 1) {
            in.readNull();
            this.value = null;
          } else {
            this.value = in.readString();
          }
          break;

        case 6:
          if (in.readIndex() != 1) {
            in.readNull();
            this.taijiWallet = null;
          } else {
            this.taijiWallet = in.readString();
          }
          break;

        case 7:
          if (in.readIndex() != 1) {
            in.readNull();
            this.country = null;
          } else {
            this.country = in.readString();
          }
          break;

        case 8:
          if (in.readIndex() != 1) {
            in.readNull();
            this.province = null;
          } else {
            this.province = in.readString();
          }
          break;

        case 9:
          if (in.readIndex() != 1) {
            in.readNull();
            this.city = null;
          } else {
            this.city = in.readString();
          }
          break;

        case 10:
          if (in.readIndex() != 1) {
            in.readNull();
            this.oldCountry = null;
          } else {
            this.oldCountry = in.readString();
          }
          break;

        case 11:
          if (in.readIndex() != 1) {
            in.readNull();
            this.oldProvince = null;
          } else {
            this.oldProvince = in.readString();
          }
          break;

        case 12:
          if (in.readIndex() != 1) {
            in.readNull();
            this.oldCity = null;
          } else {
            this.oldCity = in.readString();
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}











/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package net.lightapi.portal.deployment;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class DeploymentCreatedEvent extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -6904523716197246176L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"DeploymentCreatedEvent\",\"namespace\":\"net.lightapi.portal.deployment\",\"fields\":[{\"name\":\"EventId\",\"type\":{\"type\":\"record\",\"name\":\"EventId\",\"namespace\":\"com.networknt.kafka.common\",\"fields\":[{\"name\":\"id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"a unique identifier for the event\"},{\"name\":\"userId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"the user who creates the event\"},{\"name\":\"hostId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"the host which is the event is created\"},{\"name\":\"nonce\",\"type\":\"long\",\"doc\":\"the number of the transactions for the user\"},{\"name\":\"timestamp\",\"type\":\"long\",\"doc\":\"time the event is recorded\",\"default\":0},{\"name\":\"derived\",\"type\":\"boolean\",\"doc\":\"indicate if the event is derived from event processor\",\"default\":false}]}},{\"name\":\"deploymentId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"deployment id\"},{\"name\":\"instanceId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"instance id\"},{\"name\":\"deploymentStatus\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"deployment status\"},{\"name\":\"deploymentType\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"deployment type\"},{\"name\":\"pipelineId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"pipeline id\"},{\"name\":\"scheduleTs\",\"type\":\"long\",\"doc\":\"schedule timestamp\",\"default\":0}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<DeploymentCreatedEvent> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<DeploymentCreatedEvent> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<DeploymentCreatedEvent> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<DeploymentCreatedEvent> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<DeploymentCreatedEvent> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this DeploymentCreatedEvent to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a DeploymentCreatedEvent from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a DeploymentCreatedEvent instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static DeploymentCreatedEvent fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private com.networknt.kafka.common.EventId EventId;
  /** deployment id */
  private java.lang.String deploymentId;
  /** instance id */
  private java.lang.String instanceId;
  /** deployment status */
  private java.lang.String deploymentStatus;
  /** deployment type */
  private java.lang.String deploymentType;
  /** pipeline id */
  private java.lang.String pipelineId;
  /** schedule timestamp */
  private long scheduleTs;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public DeploymentCreatedEvent() {}

  /**
   * All-args constructor.
   * @param EventId The new value for EventId
   * @param deploymentId deployment id
   * @param instanceId instance id
   * @param deploymentStatus deployment status
   * @param deploymentType deployment type
   * @param pipelineId pipeline id
   * @param scheduleTs schedule timestamp
   */
  public DeploymentCreatedEvent(com.networknt.kafka.common.EventId EventId, java.lang.String deploymentId, java.lang.String instanceId, java.lang.String deploymentStatus, java.lang.String deploymentType, java.lang.String pipelineId, java.lang.Long scheduleTs) {
    this.EventId = EventId;
    this.deploymentId = deploymentId;
    this.instanceId = instanceId;
    this.deploymentStatus = deploymentStatus;
    this.deploymentType = deploymentType;
    this.pipelineId = pipelineId;
    this.scheduleTs = scheduleTs;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return EventId;
    case 1: return deploymentId;
    case 2: return instanceId;
    case 3: return deploymentStatus;
    case 4: return deploymentType;
    case 5: return pipelineId;
    case 6: return scheduleTs;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: EventId = (com.networknt.kafka.common.EventId)value$; break;
    case 1: deploymentId = value$ != null ? value$.toString() : null; break;
    case 2: instanceId = value$ != null ? value$.toString() : null; break;
    case 3: deploymentStatus = value$ != null ? value$.toString() : null; break;
    case 4: deploymentType = value$ != null ? value$.toString() : null; break;
    case 5: pipelineId = value$ != null ? value$.toString() : null; break;
    case 6: scheduleTs = (java.lang.Long)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'EventId' field.
   * @return The value of the 'EventId' field.
   */
  public com.networknt.kafka.common.EventId getEventId() {
    return EventId;
  }


  /**
   * Sets the value of the 'EventId' field.
   * @param value the value to set.
   */
  public void setEventId(com.networknt.kafka.common.EventId value) {
    this.EventId = value;
  }

  /**
   * Gets the value of the 'deploymentId' field.
   * @return deployment id
   */
  public java.lang.String getDeploymentId() {
    return deploymentId;
  }


  /**
   * Sets the value of the 'deploymentId' field.
   * deployment id
   * @param value the value to set.
   */
  public void setDeploymentId(java.lang.String value) {
    this.deploymentId = value;
  }

  /**
   * Gets the value of the 'instanceId' field.
   * @return instance id
   */
  public java.lang.String getInstanceId() {
    return instanceId;
  }


  /**
   * Sets the value of the 'instanceId' field.
   * instance id
   * @param value the value to set.
   */
  public void setInstanceId(java.lang.String value) {
    this.instanceId = value;
  }

  /**
   * Gets the value of the 'deploymentStatus' field.
   * @return deployment status
   */
  public java.lang.String getDeploymentStatus() {
    return deploymentStatus;
  }


  /**
   * Sets the value of the 'deploymentStatus' field.
   * deployment status
   * @param value the value to set.
   */
  public void setDeploymentStatus(java.lang.String value) {
    this.deploymentStatus = value;
  }

  /**
   * Gets the value of the 'deploymentType' field.
   * @return deployment type
   */
  public java.lang.String getDeploymentType() {
    return deploymentType;
  }


  /**
   * Sets the value of the 'deploymentType' field.
   * deployment type
   * @param value the value to set.
   */
  public void setDeploymentType(java.lang.String value) {
    this.deploymentType = value;
  }

  /**
   * Gets the value of the 'pipelineId' field.
   * @return pipeline id
   */
  public java.lang.String getPipelineId() {
    return pipelineId;
  }


  /**
   * Sets the value of the 'pipelineId' field.
   * pipeline id
   * @param value the value to set.
   */
  public void setPipelineId(java.lang.String value) {
    this.pipelineId = value;
  }

  /**
   * Gets the value of the 'scheduleTs' field.
   * @return schedule timestamp
   */
  public long getScheduleTs() {
    return scheduleTs;
  }


  /**
   * Sets the value of the 'scheduleTs' field.
   * schedule timestamp
   * @param value the value to set.
   */
  public void setScheduleTs(long value) {
    this.scheduleTs = value;
  }

  /**
   * Creates a new DeploymentCreatedEvent RecordBuilder.
   * @return A new DeploymentCreatedEvent RecordBuilder
   */
  public static net.lightapi.portal.deployment.DeploymentCreatedEvent.Builder newBuilder() {
    return new net.lightapi.portal.deployment.DeploymentCreatedEvent.Builder();
  }

  /**
   * Creates a new DeploymentCreatedEvent RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new DeploymentCreatedEvent RecordBuilder
   */
  public static net.lightapi.portal.deployment.DeploymentCreatedEvent.Builder newBuilder(net.lightapi.portal.deployment.DeploymentCreatedEvent.Builder other) {
    if (other == null) {
      return new net.lightapi.portal.deployment.DeploymentCreatedEvent.Builder();
    } else {
      return new net.lightapi.portal.deployment.DeploymentCreatedEvent.Builder(other);
    }
  }

  /**
   * Creates a new DeploymentCreatedEvent RecordBuilder by copying an existing DeploymentCreatedEvent instance.
   * @param other The existing instance to copy.
   * @return A new DeploymentCreatedEvent RecordBuilder
   */
  public static net.lightapi.portal.deployment.DeploymentCreatedEvent.Builder newBuilder(net.lightapi.portal.deployment.DeploymentCreatedEvent other) {
    if (other == null) {
      return new net.lightapi.portal.deployment.DeploymentCreatedEvent.Builder();
    } else {
      return new net.lightapi.portal.deployment.DeploymentCreatedEvent.Builder(other);
    }
  }

  /**
   * RecordBuilder for DeploymentCreatedEvent instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<DeploymentCreatedEvent>
    implements org.apache.avro.data.RecordBuilder<DeploymentCreatedEvent> {

    private com.networknt.kafka.common.EventId EventId;
    private com.networknt.kafka.common.EventId.Builder EventIdBuilder;
    /** deployment id */
    private java.lang.String deploymentId;
    /** instance id */
    private java.lang.String instanceId;
    /** deployment status */
    private java.lang.String deploymentStatus;
    /** deployment type */
    private java.lang.String deploymentType;
    /** pipeline id */
    private java.lang.String pipelineId;
    /** schedule timestamp */
    private long scheduleTs;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(net.lightapi.portal.deployment.DeploymentCreatedEvent.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.EventId)) {
        this.EventId = data().deepCopy(fields()[0].schema(), other.EventId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (other.hasEventIdBuilder()) {
        this.EventIdBuilder = com.networknt.kafka.common.EventId.newBuilder(other.getEventIdBuilder());
      }
      if (isValidValue(fields()[1], other.deploymentId)) {
        this.deploymentId = data().deepCopy(fields()[1].schema(), other.deploymentId);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.instanceId)) {
        this.instanceId = data().deepCopy(fields()[2].schema(), other.instanceId);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.deploymentStatus)) {
        this.deploymentStatus = data().deepCopy(fields()[3].schema(), other.deploymentStatus);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.deploymentType)) {
        this.deploymentType = data().deepCopy(fields()[4].schema(), other.deploymentType);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.pipelineId)) {
        this.pipelineId = data().deepCopy(fields()[5].schema(), other.pipelineId);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.scheduleTs)) {
        this.scheduleTs = data().deepCopy(fields()[6].schema(), other.scheduleTs);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
    }

    /**
     * Creates a Builder by copying an existing DeploymentCreatedEvent instance
     * @param other The existing instance to copy.
     */
    private Builder(net.lightapi.portal.deployment.DeploymentCreatedEvent other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.EventId)) {
        this.EventId = data().deepCopy(fields()[0].schema(), other.EventId);
        fieldSetFlags()[0] = true;
      }
      this.EventIdBuilder = null;
      if (isValidValue(fields()[1], other.deploymentId)) {
        this.deploymentId = data().deepCopy(fields()[1].schema(), other.deploymentId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.instanceId)) {
        this.instanceId = data().deepCopy(fields()[2].schema(), other.instanceId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.deploymentStatus)) {
        this.deploymentStatus = data().deepCopy(fields()[3].schema(), other.deploymentStatus);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.deploymentType)) {
        this.deploymentType = data().deepCopy(fields()[4].schema(), other.deploymentType);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.pipelineId)) {
        this.pipelineId = data().deepCopy(fields()[5].schema(), other.pipelineId);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.scheduleTs)) {
        this.scheduleTs = data().deepCopy(fields()[6].schema(), other.scheduleTs);
        fieldSetFlags()[6] = true;
      }
    }

    /**
      * Gets the value of the 'EventId' field.
      * @return The value.
      */
    public com.networknt.kafka.common.EventId getEventId() {
      return EventId;
    }


    /**
      * Sets the value of the 'EventId' field.
      * @param value The value of 'EventId'.
      * @return This builder.
      */
    public net.lightapi.portal.deployment.DeploymentCreatedEvent.Builder setEventId(com.networknt.kafka.common.EventId value) {
      validate(fields()[0], value);
      this.EventIdBuilder = null;
      this.EventId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'EventId' field has been set.
      * @return True if the 'EventId' field has been set, false otherwise.
      */
    public boolean hasEventId() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'EventId' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.networknt.kafka.common.EventId.Builder getEventIdBuilder() {
      if (EventIdBuilder == null) {
        if (hasEventId()) {
          setEventIdBuilder(com.networknt.kafka.common.EventId.newBuilder(EventId));
        } else {
          setEventIdBuilder(com.networknt.kafka.common.EventId.newBuilder());
        }
      }
      return EventIdBuilder;
    }

    /**
     * Sets the Builder instance for the 'EventId' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public net.lightapi.portal.deployment.DeploymentCreatedEvent.Builder setEventIdBuilder(com.networknt.kafka.common.EventId.Builder value) {
      clearEventId();
      EventIdBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'EventId' field has an active Builder instance
     * @return True if the 'EventId' field has an active Builder instance
     */
    public boolean hasEventIdBuilder() {
      return EventIdBuilder != null;
    }

    /**
      * Clears the value of the 'EventId' field.
      * @return This builder.
      */
    public net.lightapi.portal.deployment.DeploymentCreatedEvent.Builder clearEventId() {
      EventId = null;
      EventIdBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'deploymentId' field.
      * deployment id
      * @return The value.
      */
    public java.lang.String getDeploymentId() {
      return deploymentId;
    }


    /**
      * Sets the value of the 'deploymentId' field.
      * deployment id
      * @param value The value of 'deploymentId'.
      * @return This builder.
      */
    public net.lightapi.portal.deployment.DeploymentCreatedEvent.Builder setDeploymentId(java.lang.String value) {
      validate(fields()[1], value);
      this.deploymentId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'deploymentId' field has been set.
      * deployment id
      * @return True if the 'deploymentId' field has been set, false otherwise.
      */
    public boolean hasDeploymentId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'deploymentId' field.
      * deployment id
      * @return This builder.
      */
    public net.lightapi.portal.deployment.DeploymentCreatedEvent.Builder clearDeploymentId() {
      deploymentId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'instanceId' field.
      * instance id
      * @return The value.
      */
    public java.lang.String getInstanceId() {
      return instanceId;
    }


    /**
      * Sets the value of the 'instanceId' field.
      * instance id
      * @param value The value of 'instanceId'.
      * @return This builder.
      */
    public net.lightapi.portal.deployment.DeploymentCreatedEvent.Builder setInstanceId(java.lang.String value) {
      validate(fields()[2], value);
      this.instanceId = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'instanceId' field has been set.
      * instance id
      * @return True if the 'instanceId' field has been set, false otherwise.
      */
    public boolean hasInstanceId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'instanceId' field.
      * instance id
      * @return This builder.
      */
    public net.lightapi.portal.deployment.DeploymentCreatedEvent.Builder clearInstanceId() {
      instanceId = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'deploymentStatus' field.
      * deployment status
      * @return The value.
      */
    public java.lang.String getDeploymentStatus() {
      return deploymentStatus;
    }


    /**
      * Sets the value of the 'deploymentStatus' field.
      * deployment status
      * @param value The value of 'deploymentStatus'.
      * @return This builder.
      */
    public net.lightapi.portal.deployment.DeploymentCreatedEvent.Builder setDeploymentStatus(java.lang.String value) {
      validate(fields()[3], value);
      this.deploymentStatus = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'deploymentStatus' field has been set.
      * deployment status
      * @return True if the 'deploymentStatus' field has been set, false otherwise.
      */
    public boolean hasDeploymentStatus() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'deploymentStatus' field.
      * deployment status
      * @return This builder.
      */
    public net.lightapi.portal.deployment.DeploymentCreatedEvent.Builder clearDeploymentStatus() {
      deploymentStatus = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'deploymentType' field.
      * deployment type
      * @return The value.
      */
    public java.lang.String getDeploymentType() {
      return deploymentType;
    }


    /**
      * Sets the value of the 'deploymentType' field.
      * deployment type
      * @param value The value of 'deploymentType'.
      * @return This builder.
      */
    public net.lightapi.portal.deployment.DeploymentCreatedEvent.Builder setDeploymentType(java.lang.String value) {
      validate(fields()[4], value);
      this.deploymentType = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'deploymentType' field has been set.
      * deployment type
      * @return True if the 'deploymentType' field has been set, false otherwise.
      */
    public boolean hasDeploymentType() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'deploymentType' field.
      * deployment type
      * @return This builder.
      */
    public net.lightapi.portal.deployment.DeploymentCreatedEvent.Builder clearDeploymentType() {
      deploymentType = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'pipelineId' field.
      * pipeline id
      * @return The value.
      */
    public java.lang.String getPipelineId() {
      return pipelineId;
    }


    /**
      * Sets the value of the 'pipelineId' field.
      * pipeline id
      * @param value The value of 'pipelineId'.
      * @return This builder.
      */
    public net.lightapi.portal.deployment.DeploymentCreatedEvent.Builder setPipelineId(java.lang.String value) {
      validate(fields()[5], value);
      this.pipelineId = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'pipelineId' field has been set.
      * pipeline id
      * @return True if the 'pipelineId' field has been set, false otherwise.
      */
    public boolean hasPipelineId() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'pipelineId' field.
      * pipeline id
      * @return This builder.
      */
    public net.lightapi.portal.deployment.DeploymentCreatedEvent.Builder clearPipelineId() {
      pipelineId = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'scheduleTs' field.
      * schedule timestamp
      * @return The value.
      */
    public long getScheduleTs() {
      return scheduleTs;
    }


    /**
      * Sets the value of the 'scheduleTs' field.
      * schedule timestamp
      * @param value The value of 'scheduleTs'.
      * @return This builder.
      */
    public net.lightapi.portal.deployment.DeploymentCreatedEvent.Builder setScheduleTs(long value) {
      validate(fields()[6], value);
      this.scheduleTs = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'scheduleTs' field has been set.
      * schedule timestamp
      * @return True if the 'scheduleTs' field has been set, false otherwise.
      */
    public boolean hasScheduleTs() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'scheduleTs' field.
      * schedule timestamp
      * @return This builder.
      */
    public net.lightapi.portal.deployment.DeploymentCreatedEvent.Builder clearScheduleTs() {
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public DeploymentCreatedEvent build() {
      try {
        DeploymentCreatedEvent record = new DeploymentCreatedEvent();
        if (EventIdBuilder != null) {
          try {
            record.EventId = this.EventIdBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("EventId"));
            throw e;
          }
        } else {
          record.EventId = fieldSetFlags()[0] ? this.EventId : (com.networknt.kafka.common.EventId) defaultValue(fields()[0]);
        }
        record.deploymentId = fieldSetFlags()[1] ? this.deploymentId : (java.lang.String) defaultValue(fields()[1]);
        record.instanceId = fieldSetFlags()[2] ? this.instanceId : (java.lang.String) defaultValue(fields()[2]);
        record.deploymentStatus = fieldSetFlags()[3] ? this.deploymentStatus : (java.lang.String) defaultValue(fields()[3]);
        record.deploymentType = fieldSetFlags()[4] ? this.deploymentType : (java.lang.String) defaultValue(fields()[4]);
        record.pipelineId = fieldSetFlags()[5] ? this.pipelineId : (java.lang.String) defaultValue(fields()[5]);
        record.scheduleTs = fieldSetFlags()[6] ? this.scheduleTs : (java.lang.Long) defaultValue(fields()[6]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<DeploymentCreatedEvent>
    WRITER$ = (org.apache.avro.io.DatumWriter<DeploymentCreatedEvent>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<DeploymentCreatedEvent>
    READER$ = (org.apache.avro.io.DatumReader<DeploymentCreatedEvent>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    this.EventId.customEncode(out);

    out.writeString(this.deploymentId);

    out.writeString(this.instanceId);

    out.writeString(this.deploymentStatus);

    out.writeString(this.deploymentType);

    out.writeString(this.pipelineId);

    out.writeLong(this.scheduleTs);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (this.EventId == null) {
        this.EventId = new com.networknt.kafka.common.EventId();
      }
      this.EventId.customDecode(in);

      this.deploymentId = in.readString();

      this.instanceId = in.readString();

      this.deploymentStatus = in.readString();

      this.deploymentType = in.readString();

      this.pipelineId = in.readString();

      this.scheduleTs = in.readLong();

    } else {
      for (int i = 0; i < 7; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (this.EventId == null) {
            this.EventId = new com.networknt.kafka.common.EventId();
          }
          this.EventId.customDecode(in);
          break;

        case 1:
          this.deploymentId = in.readString();
          break;

        case 2:
          this.instanceId = in.readString();
          break;

        case 3:
          this.deploymentStatus = in.readString();
          break;

        case 4:
          this.deploymentType = in.readString();
          break;

        case 5:
          this.pipelineId = in.readString();
          break;

        case 6:
          this.scheduleTs = in.readLong();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}

/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package net.lightapi.portal.controller;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class ControllerDeregisteredEvent extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 7868637430280514900L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ControllerDeregisteredEvent\",\"namespace\":\"net.lightapi.portal.controller\",\"fields\":[{\"name\":\"EventId\",\"type\":{\"type\":\"record\",\"name\":\"EventId\",\"namespace\":\"com.networknt.kafka.common\",\"fields\":[{\"name\":\"id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"a unique identifier\"},{\"name\":\"nonce\",\"type\":\"long\",\"doc\":\"the number of the transactions for the user\"},{\"name\":\"derived\",\"type\":\"boolean\",\"doc\":\"indicate if the event is derived from event processor\",\"default\":false}]}},{\"name\":\"host\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"host\"},{\"name\":\"key\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"key id that might be service or service plus tag if tag is not null\"},{\"name\":\"serviceId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"serviceId of the registered service from server.yml\"},{\"name\":\"protocol\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"protocol of the service that controller is connecting to. http or https\"},{\"name\":\"tag\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"the environment tag of the service\",\"default\":null},{\"name\":\"address\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"the ip address of the service\"},{\"name\":\"port\",\"type\":\"int\",\"doc\":\"the port number of the service\"},{\"name\":\"timestamp\",\"type\":\"long\",\"doc\":\"time the event is recorded\",\"default\":0}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<ControllerDeregisteredEvent> ENCODER =
      new BinaryMessageEncoder<ControllerDeregisteredEvent>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<ControllerDeregisteredEvent> DECODER =
      new BinaryMessageDecoder<ControllerDeregisteredEvent>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<ControllerDeregisteredEvent> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<ControllerDeregisteredEvent> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<ControllerDeregisteredEvent> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<ControllerDeregisteredEvent>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this ControllerDeregisteredEvent to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a ControllerDeregisteredEvent from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a ControllerDeregisteredEvent instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static ControllerDeregisteredEvent fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private com.networknt.kafka.common.EventId EventId;
  /** host */
  private java.lang.String host;
  /** key id that might be service or service plus tag if tag is not null */
  private java.lang.String key;
  /** serviceId of the registered service from server.yml */
  private java.lang.String serviceId;
  /** protocol of the service that controller is connecting to. http or https */
  private java.lang.String protocol;
  /** the environment tag of the service */
  private java.lang.String tag;
  /** the ip address of the service */
  private java.lang.String address;
  /** the port number of the service */
  private int port;
  /** time the event is recorded */
  private long timestamp;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ControllerDeregisteredEvent() {}

  /**
   * All-args constructor.
   * @param EventId The new value for EventId
   * @param host host
   * @param key key id that might be service or service plus tag if tag is not null
   * @param serviceId serviceId of the registered service from server.yml
   * @param protocol protocol of the service that controller is connecting to. http or https
   * @param tag the environment tag of the service
   * @param address the ip address of the service
   * @param port the port number of the service
   * @param timestamp time the event is recorded
   */
  public ControllerDeregisteredEvent(com.networknt.kafka.common.EventId EventId, java.lang.String host, java.lang.String key, java.lang.String serviceId, java.lang.String protocol, java.lang.String tag, java.lang.String address, java.lang.Integer port, java.lang.Long timestamp) {
    this.EventId = EventId;
    this.host = host;
    this.key = key;
    this.serviceId = serviceId;
    this.protocol = protocol;
    this.tag = tag;
    this.address = address;
    this.port = port;
    this.timestamp = timestamp;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return EventId;
    case 1: return host;
    case 2: return key;
    case 3: return serviceId;
    case 4: return protocol;
    case 5: return tag;
    case 6: return address;
    case 7: return port;
    case 8: return timestamp;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: EventId = (com.networknt.kafka.common.EventId)value$; break;
    case 1: host = value$ != null ? value$.toString() : null; break;
    case 2: key = value$ != null ? value$.toString() : null; break;
    case 3: serviceId = value$ != null ? value$.toString() : null; break;
    case 4: protocol = value$ != null ? value$.toString() : null; break;
    case 5: tag = value$ != null ? value$.toString() : null; break;
    case 6: address = value$ != null ? value$.toString() : null; break;
    case 7: port = (java.lang.Integer)value$; break;
    case 8: timestamp = (java.lang.Long)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'EventId' field.
   * @return The value of the 'EventId' field.
   */
  public com.networknt.kafka.common.EventId getEventId() {
    return EventId;
  }


  /**
   * Sets the value of the 'EventId' field.
   * @param value the value to set.
   */
  public void setEventId(com.networknt.kafka.common.EventId value) {
    this.EventId = value;
  }

  /**
   * Gets the value of the 'host' field.
   * @return host
   */
  public java.lang.String getHost() {
    return host;
  }


  /**
   * Sets the value of the 'host' field.
   * host
   * @param value the value to set.
   */
  public void setHost(java.lang.String value) {
    this.host = value;
  }

  /**
   * Gets the value of the 'key' field.
   * @return key id that might be service or service plus tag if tag is not null
   */
  public java.lang.String getKey() {
    return key;
  }


  /**
   * Sets the value of the 'key' field.
   * key id that might be service or service plus tag if tag is not null
   * @param value the value to set.
   */
  public void setKey(java.lang.String value) {
    this.key = value;
  }

  /**
   * Gets the value of the 'serviceId' field.
   * @return serviceId of the registered service from server.yml
   */
  public java.lang.String getServiceId() {
    return serviceId;
  }


  /**
   * Sets the value of the 'serviceId' field.
   * serviceId of the registered service from server.yml
   * @param value the value to set.
   */
  public void setServiceId(java.lang.String value) {
    this.serviceId = value;
  }

  /**
   * Gets the value of the 'protocol' field.
   * @return protocol of the service that controller is connecting to. http or https
   */
  public java.lang.String getProtocol() {
    return protocol;
  }


  /**
   * Sets the value of the 'protocol' field.
   * protocol of the service that controller is connecting to. http or https
   * @param value the value to set.
   */
  public void setProtocol(java.lang.String value) {
    this.protocol = value;
  }

  /**
   * Gets the value of the 'tag' field.
   * @return the environment tag of the service
   */
  public java.lang.String getTag() {
    return tag;
  }


  /**
   * Sets the value of the 'tag' field.
   * the environment tag of the service
   * @param value the value to set.
   */
  public void setTag(java.lang.String value) {
    this.tag = value;
  }

  /**
   * Gets the value of the 'address' field.
   * @return the ip address of the service
   */
  public java.lang.String getAddress() {
    return address;
  }


  /**
   * Sets the value of the 'address' field.
   * the ip address of the service
   * @param value the value to set.
   */
  public void setAddress(java.lang.String value) {
    this.address = value;
  }

  /**
   * Gets the value of the 'port' field.
   * @return the port number of the service
   */
  public int getPort() {
    return port;
  }


  /**
   * Sets the value of the 'port' field.
   * the port number of the service
   * @param value the value to set.
   */
  public void setPort(int value) {
    this.port = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return time the event is recorded
   */
  public long getTimestamp() {
    return timestamp;
  }


  /**
   * Sets the value of the 'timestamp' field.
   * time the event is recorded
   * @param value the value to set.
   */
  public void setTimestamp(long value) {
    this.timestamp = value;
  }

  /**
   * Creates a new ControllerDeregisteredEvent RecordBuilder.
   * @return A new ControllerDeregisteredEvent RecordBuilder
   */
  public static net.lightapi.portal.controller.ControllerDeregisteredEvent.Builder newBuilder() {
    return new net.lightapi.portal.controller.ControllerDeregisteredEvent.Builder();
  }

  /**
   * Creates a new ControllerDeregisteredEvent RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ControllerDeregisteredEvent RecordBuilder
   */
  public static net.lightapi.portal.controller.ControllerDeregisteredEvent.Builder newBuilder(net.lightapi.portal.controller.ControllerDeregisteredEvent.Builder other) {
    if (other == null) {
      return new net.lightapi.portal.controller.ControllerDeregisteredEvent.Builder();
    } else {
      return new net.lightapi.portal.controller.ControllerDeregisteredEvent.Builder(other);
    }
  }

  /**
   * Creates a new ControllerDeregisteredEvent RecordBuilder by copying an existing ControllerDeregisteredEvent instance.
   * @param other The existing instance to copy.
   * @return A new ControllerDeregisteredEvent RecordBuilder
   */
  public static net.lightapi.portal.controller.ControllerDeregisteredEvent.Builder newBuilder(net.lightapi.portal.controller.ControllerDeregisteredEvent other) {
    if (other == null) {
      return new net.lightapi.portal.controller.ControllerDeregisteredEvent.Builder();
    } else {
      return new net.lightapi.portal.controller.ControllerDeregisteredEvent.Builder(other);
    }
  }

  /**
   * RecordBuilder for ControllerDeregisteredEvent instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ControllerDeregisteredEvent>
    implements org.apache.avro.data.RecordBuilder<ControllerDeregisteredEvent> {

    private com.networknt.kafka.common.EventId EventId;
    private com.networknt.kafka.common.EventId.Builder EventIdBuilder;
    /** host */
    private java.lang.String host;
    /** key id that might be service or service plus tag if tag is not null */
    private java.lang.String key;
    /** serviceId of the registered service from server.yml */
    private java.lang.String serviceId;
    /** protocol of the service that controller is connecting to. http or https */
    private java.lang.String protocol;
    /** the environment tag of the service */
    private java.lang.String tag;
    /** the ip address of the service */
    private java.lang.String address;
    /** the port number of the service */
    private int port;
    /** time the event is recorded */
    private long timestamp;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(net.lightapi.portal.controller.ControllerDeregisteredEvent.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.EventId)) {
        this.EventId = data().deepCopy(fields()[0].schema(), other.EventId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (other.hasEventIdBuilder()) {
        this.EventIdBuilder = com.networknt.kafka.common.EventId.newBuilder(other.getEventIdBuilder());
      }
      if (isValidValue(fields()[1], other.host)) {
        this.host = data().deepCopy(fields()[1].schema(), other.host);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.key)) {
        this.key = data().deepCopy(fields()[2].schema(), other.key);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.serviceId)) {
        this.serviceId = data().deepCopy(fields()[3].schema(), other.serviceId);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.protocol)) {
        this.protocol = data().deepCopy(fields()[4].schema(), other.protocol);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.tag)) {
        this.tag = data().deepCopy(fields()[5].schema(), other.tag);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.address)) {
        this.address = data().deepCopy(fields()[6].schema(), other.address);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.port)) {
        this.port = data().deepCopy(fields()[7].schema(), other.port);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[8].schema(), other.timestamp);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
    }

    /**
     * Creates a Builder by copying an existing ControllerDeregisteredEvent instance
     * @param other The existing instance to copy.
     */
    private Builder(net.lightapi.portal.controller.ControllerDeregisteredEvent other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.EventId)) {
        this.EventId = data().deepCopy(fields()[0].schema(), other.EventId);
        fieldSetFlags()[0] = true;
      }
      this.EventIdBuilder = null;
      if (isValidValue(fields()[1], other.host)) {
        this.host = data().deepCopy(fields()[1].schema(), other.host);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.key)) {
        this.key = data().deepCopy(fields()[2].schema(), other.key);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.serviceId)) {
        this.serviceId = data().deepCopy(fields()[3].schema(), other.serviceId);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.protocol)) {
        this.protocol = data().deepCopy(fields()[4].schema(), other.protocol);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.tag)) {
        this.tag = data().deepCopy(fields()[5].schema(), other.tag);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.address)) {
        this.address = data().deepCopy(fields()[6].schema(), other.address);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.port)) {
        this.port = data().deepCopy(fields()[7].schema(), other.port);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[8].schema(), other.timestamp);
        fieldSetFlags()[8] = true;
      }
    }

    /**
      * Gets the value of the 'EventId' field.
      * @return The value.
      */
    public com.networknt.kafka.common.EventId getEventId() {
      return EventId;
    }


    /**
      * Sets the value of the 'EventId' field.
      * @param value The value of 'EventId'.
      * @return This builder.
      */
    public net.lightapi.portal.controller.ControllerDeregisteredEvent.Builder setEventId(com.networknt.kafka.common.EventId value) {
      validate(fields()[0], value);
      this.EventIdBuilder = null;
      this.EventId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'EventId' field has been set.
      * @return True if the 'EventId' field has been set, false otherwise.
      */
    public boolean hasEventId() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'EventId' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.networknt.kafka.common.EventId.Builder getEventIdBuilder() {
      if (EventIdBuilder == null) {
        if (hasEventId()) {
          setEventIdBuilder(com.networknt.kafka.common.EventId.newBuilder(EventId));
        } else {
          setEventIdBuilder(com.networknt.kafka.common.EventId.newBuilder());
        }
      }
      return EventIdBuilder;
    }

    /**
     * Sets the Builder instance for the 'EventId' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public net.lightapi.portal.controller.ControllerDeregisteredEvent.Builder setEventIdBuilder(com.networknt.kafka.common.EventId.Builder value) {
      clearEventId();
      EventIdBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'EventId' field has an active Builder instance
     * @return True if the 'EventId' field has an active Builder instance
     */
    public boolean hasEventIdBuilder() {
      return EventIdBuilder != null;
    }

    /**
      * Clears the value of the 'EventId' field.
      * @return This builder.
      */
    public net.lightapi.portal.controller.ControllerDeregisteredEvent.Builder clearEventId() {
      EventId = null;
      EventIdBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'host' field.
      * host
      * @return The value.
      */
    public java.lang.String getHost() {
      return host;
    }


    /**
      * Sets the value of the 'host' field.
      * host
      * @param value The value of 'host'.
      * @return This builder.
      */
    public net.lightapi.portal.controller.ControllerDeregisteredEvent.Builder setHost(java.lang.String value) {
      validate(fields()[1], value);
      this.host = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'host' field has been set.
      * host
      * @return True if the 'host' field has been set, false otherwise.
      */
    public boolean hasHost() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'host' field.
      * host
      * @return This builder.
      */
    public net.lightapi.portal.controller.ControllerDeregisteredEvent.Builder clearHost() {
      host = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'key' field.
      * key id that might be service or service plus tag if tag is not null
      * @return The value.
      */
    public java.lang.String getKey() {
      return key;
    }


    /**
      * Sets the value of the 'key' field.
      * key id that might be service or service plus tag if tag is not null
      * @param value The value of 'key'.
      * @return This builder.
      */
    public net.lightapi.portal.controller.ControllerDeregisteredEvent.Builder setKey(java.lang.String value) {
      validate(fields()[2], value);
      this.key = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'key' field has been set.
      * key id that might be service or service plus tag if tag is not null
      * @return True if the 'key' field has been set, false otherwise.
      */
    public boolean hasKey() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'key' field.
      * key id that might be service or service plus tag if tag is not null
      * @return This builder.
      */
    public net.lightapi.portal.controller.ControllerDeregisteredEvent.Builder clearKey() {
      key = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'serviceId' field.
      * serviceId of the registered service from server.yml
      * @return The value.
      */
    public java.lang.String getServiceId() {
      return serviceId;
    }


    /**
      * Sets the value of the 'serviceId' field.
      * serviceId of the registered service from server.yml
      * @param value The value of 'serviceId'.
      * @return This builder.
      */
    public net.lightapi.portal.controller.ControllerDeregisteredEvent.Builder setServiceId(java.lang.String value) {
      validate(fields()[3], value);
      this.serviceId = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'serviceId' field has been set.
      * serviceId of the registered service from server.yml
      * @return True if the 'serviceId' field has been set, false otherwise.
      */
    public boolean hasServiceId() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'serviceId' field.
      * serviceId of the registered service from server.yml
      * @return This builder.
      */
    public net.lightapi.portal.controller.ControllerDeregisteredEvent.Builder clearServiceId() {
      serviceId = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'protocol' field.
      * protocol of the service that controller is connecting to. http or https
      * @return The value.
      */
    public java.lang.String getProtocol() {
      return protocol;
    }


    /**
      * Sets the value of the 'protocol' field.
      * protocol of the service that controller is connecting to. http or https
      * @param value The value of 'protocol'.
      * @return This builder.
      */
    public net.lightapi.portal.controller.ControllerDeregisteredEvent.Builder setProtocol(java.lang.String value) {
      validate(fields()[4], value);
      this.protocol = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'protocol' field has been set.
      * protocol of the service that controller is connecting to. http or https
      * @return True if the 'protocol' field has been set, false otherwise.
      */
    public boolean hasProtocol() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'protocol' field.
      * protocol of the service that controller is connecting to. http or https
      * @return This builder.
      */
    public net.lightapi.portal.controller.ControllerDeregisteredEvent.Builder clearProtocol() {
      protocol = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'tag' field.
      * the environment tag of the service
      * @return The value.
      */
    public java.lang.String getTag() {
      return tag;
    }


    /**
      * Sets the value of the 'tag' field.
      * the environment tag of the service
      * @param value The value of 'tag'.
      * @return This builder.
      */
    public net.lightapi.portal.controller.ControllerDeregisteredEvent.Builder setTag(java.lang.String value) {
      validate(fields()[5], value);
      this.tag = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'tag' field has been set.
      * the environment tag of the service
      * @return True if the 'tag' field has been set, false otherwise.
      */
    public boolean hasTag() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'tag' field.
      * the environment tag of the service
      * @return This builder.
      */
    public net.lightapi.portal.controller.ControllerDeregisteredEvent.Builder clearTag() {
      tag = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'address' field.
      * the ip address of the service
      * @return The value.
      */
    public java.lang.String getAddress() {
      return address;
    }


    /**
      * Sets the value of the 'address' field.
      * the ip address of the service
      * @param value The value of 'address'.
      * @return This builder.
      */
    public net.lightapi.portal.controller.ControllerDeregisteredEvent.Builder setAddress(java.lang.String value) {
      validate(fields()[6], value);
      this.address = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'address' field has been set.
      * the ip address of the service
      * @return True if the 'address' field has been set, false otherwise.
      */
    public boolean hasAddress() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'address' field.
      * the ip address of the service
      * @return This builder.
      */
    public net.lightapi.portal.controller.ControllerDeregisteredEvent.Builder clearAddress() {
      address = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'port' field.
      * the port number of the service
      * @return The value.
      */
    public int getPort() {
      return port;
    }


    /**
      * Sets the value of the 'port' field.
      * the port number of the service
      * @param value The value of 'port'.
      * @return This builder.
      */
    public net.lightapi.portal.controller.ControllerDeregisteredEvent.Builder setPort(int value) {
      validate(fields()[7], value);
      this.port = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'port' field has been set.
      * the port number of the service
      * @return True if the 'port' field has been set, false otherwise.
      */
    public boolean hasPort() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'port' field.
      * the port number of the service
      * @return This builder.
      */
    public net.lightapi.portal.controller.ControllerDeregisteredEvent.Builder clearPort() {
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * time the event is recorded
      * @return The value.
      */
    public long getTimestamp() {
      return timestamp;
    }


    /**
      * Sets the value of the 'timestamp' field.
      * time the event is recorded
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public net.lightapi.portal.controller.ControllerDeregisteredEvent.Builder setTimestamp(long value) {
      validate(fields()[8], value);
      this.timestamp = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * time the event is recorded
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * time the event is recorded
      * @return This builder.
      */
    public net.lightapi.portal.controller.ControllerDeregisteredEvent.Builder clearTimestamp() {
      fieldSetFlags()[8] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public ControllerDeregisteredEvent build() {
      try {
        ControllerDeregisteredEvent record = new ControllerDeregisteredEvent();
        if (EventIdBuilder != null) {
          try {
            record.EventId = this.EventIdBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("EventId"));
            throw e;
          }
        } else {
          record.EventId = fieldSetFlags()[0] ? this.EventId : (com.networknt.kafka.common.EventId) defaultValue(fields()[0]);
        }
        record.host = fieldSetFlags()[1] ? this.host : (java.lang.String) defaultValue(fields()[1]);
        record.key = fieldSetFlags()[2] ? this.key : (java.lang.String) defaultValue(fields()[2]);
        record.serviceId = fieldSetFlags()[3] ? this.serviceId : (java.lang.String) defaultValue(fields()[3]);
        record.protocol = fieldSetFlags()[4] ? this.protocol : (java.lang.String) defaultValue(fields()[4]);
        record.tag = fieldSetFlags()[5] ? this.tag : (java.lang.String) defaultValue(fields()[5]);
        record.address = fieldSetFlags()[6] ? this.address : (java.lang.String) defaultValue(fields()[6]);
        record.port = fieldSetFlags()[7] ? this.port : (java.lang.Integer) defaultValue(fields()[7]);
        record.timestamp = fieldSetFlags()[8] ? this.timestamp : (java.lang.Long) defaultValue(fields()[8]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<ControllerDeregisteredEvent>
    WRITER$ = (org.apache.avro.io.DatumWriter<ControllerDeregisteredEvent>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<ControllerDeregisteredEvent>
    READER$ = (org.apache.avro.io.DatumReader<ControllerDeregisteredEvent>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    this.EventId.customEncode(out);

    out.writeString(this.host);

    out.writeString(this.key);

    out.writeString(this.serviceId);

    out.writeString(this.protocol);

    if (this.tag == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.tag);
    }

    out.writeString(this.address);

    out.writeInt(this.port);

    out.writeLong(this.timestamp);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (this.EventId == null) {
        this.EventId = new com.networknt.kafka.common.EventId();
      }
      this.EventId.customDecode(in);

      this.host = in.readString();

      this.key = in.readString();

      this.serviceId = in.readString();

      this.protocol = in.readString();

      if (in.readIndex() != 1) {
        in.readNull();
        this.tag = null;
      } else {
        this.tag = in.readString();
      }

      this.address = in.readString();

      this.port = in.readInt();

      this.timestamp = in.readLong();

    } else {
      for (int i = 0; i < 9; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (this.EventId == null) {
            this.EventId = new com.networknt.kafka.common.EventId();
          }
          this.EventId.customDecode(in);
          break;

        case 1:
          this.host = in.readString();
          break;

        case 2:
          this.key = in.readString();
          break;

        case 3:
          this.serviceId = in.readString();
          break;

        case 4:
          this.protocol = in.readString();
          break;

        case 5:
          if (in.readIndex() != 1) {
            in.readNull();
            this.tag = null;
          } else {
            this.tag = in.readString();
          }
          break;

        case 6:
          this.address = in.readString();
          break;

        case 7:
          this.port = in.readInt();
          break;

        case 8:
          this.timestamp = in.readLong();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}

/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package net.lightapi.portal.covid;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class CovidWebsiteUpdatedEvent extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -4052749231175609145L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"CovidWebsiteUpdatedEvent\",\"namespace\":\"net.lightapi.portal.covid\",\"fields\":[{\"name\":\"EventId\",\"type\":{\"type\":\"record\",\"name\":\"EventId\",\"namespace\":\"com.networknt.kafka.common\",\"fields\":[{\"name\":\"id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"a unique identifier\"},{\"name\":\"nonce\",\"type\":\"long\",\"doc\":\"the number of the transactions for the id\"},{\"name\":\"timestamp\",\"type\":\"long\",\"doc\":\"time the event is recorded\",\"default\":0},{\"name\":\"derived\",\"type\":\"boolean\",\"doc\":\"indicate if the event is derived from event processor\",\"default\":false}]}},{\"name\":\"hostId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"host id\"},{\"name\":\"website\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"website in string format\"},{\"name\":\"userId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"the unique user id to update map store\"},{\"name\":\"country\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"country of the user to update map store\",\"default\":null},{\"name\":\"province\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"province of the user to update map store\",\"default\":null},{\"name\":\"city\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"city of the user to update map store\",\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<CovidWebsiteUpdatedEvent> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<CovidWebsiteUpdatedEvent> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<CovidWebsiteUpdatedEvent> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<CovidWebsiteUpdatedEvent> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<CovidWebsiteUpdatedEvent> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this CovidWebsiteUpdatedEvent to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a CovidWebsiteUpdatedEvent from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a CovidWebsiteUpdatedEvent instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static CovidWebsiteUpdatedEvent fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private com.networknt.kafka.common.EventId EventId;
  /** host id */
  private java.lang.String hostId;
  /** website in string format */
  private java.lang.String website;
  /** the unique user id to update map store */
  private java.lang.String userId;
  /** country of the user to update map store */
  private java.lang.String country;
  /** province of the user to update map store */
  private java.lang.String province;
  /** city of the user to update map store */
  private java.lang.String city;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public CovidWebsiteUpdatedEvent() {}

  /**
   * All-args constructor.
   * @param EventId The new value for EventId
   * @param hostId host id
   * @param website website in string format
   * @param userId the unique user id to update map store
   * @param country country of the user to update map store
   * @param province province of the user to update map store
   * @param city city of the user to update map store
   */
  public CovidWebsiteUpdatedEvent(com.networknt.kafka.common.EventId EventId, java.lang.String hostId, java.lang.String website, java.lang.String userId, java.lang.String country, java.lang.String province, java.lang.String city) {
    this.EventId = EventId;
    this.hostId = hostId;
    this.website = website;
    this.userId = userId;
    this.country = country;
    this.province = province;
    this.city = city;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return EventId;
    case 1: return hostId;
    case 2: return website;
    case 3: return userId;
    case 4: return country;
    case 5: return province;
    case 6: return city;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: EventId = (com.networknt.kafka.common.EventId)value$; break;
    case 1: hostId = value$ != null ? value$.toString() : null; break;
    case 2: website = value$ != null ? value$.toString() : null; break;
    case 3: userId = value$ != null ? value$.toString() : null; break;
    case 4: country = value$ != null ? value$.toString() : null; break;
    case 5: province = value$ != null ? value$.toString() : null; break;
    case 6: city = value$ != null ? value$.toString() : null; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'EventId' field.
   * @return The value of the 'EventId' field.
   */
  public com.networknt.kafka.common.EventId getEventId() {
    return EventId;
  }


  /**
   * Sets the value of the 'EventId' field.
   * @param value the value to set.
   */
  public void setEventId(com.networknt.kafka.common.EventId value) {
    this.EventId = value;
  }

  /**
   * Gets the value of the 'hostId' field.
   * @return host id
   */
  public java.lang.String getHostId() {
    return hostId;
  }


  /**
   * Sets the value of the 'hostId' field.
   * host id
   * @param value the value to set.
   */
  public void setHostId(java.lang.String value) {
    this.hostId = value;
  }

  /**
   * Gets the value of the 'website' field.
   * @return website in string format
   */
  public java.lang.String getWebsite() {
    return website;
  }


  /**
   * Sets the value of the 'website' field.
   * website in string format
   * @param value the value to set.
   */
  public void setWebsite(java.lang.String value) {
    this.website = value;
  }

  /**
   * Gets the value of the 'userId' field.
   * @return the unique user id to update map store
   */
  public java.lang.String getUserId() {
    return userId;
  }


  /**
   * Sets the value of the 'userId' field.
   * the unique user id to update map store
   * @param value the value to set.
   */
  public void setUserId(java.lang.String value) {
    this.userId = value;
  }

  /**
   * Gets the value of the 'country' field.
   * @return country of the user to update map store
   */
  public java.lang.String getCountry() {
    return country;
  }


  /**
   * Sets the value of the 'country' field.
   * country of the user to update map store
   * @param value the value to set.
   */
  public void setCountry(java.lang.String value) {
    this.country = value;
  }

  /**
   * Gets the value of the 'province' field.
   * @return province of the user to update map store
   */
  public java.lang.String getProvince() {
    return province;
  }


  /**
   * Sets the value of the 'province' field.
   * province of the user to update map store
   * @param value the value to set.
   */
  public void setProvince(java.lang.String value) {
    this.province = value;
  }

  /**
   * Gets the value of the 'city' field.
   * @return city of the user to update map store
   */
  public java.lang.String getCity() {
    return city;
  }


  /**
   * Sets the value of the 'city' field.
   * city of the user to update map store
   * @param value the value to set.
   */
  public void setCity(java.lang.String value) {
    this.city = value;
  }

  /**
   * Creates a new CovidWebsiteUpdatedEvent RecordBuilder.
   * @return A new CovidWebsiteUpdatedEvent RecordBuilder
   */
  public static net.lightapi.portal.covid.CovidWebsiteUpdatedEvent.Builder newBuilder() {
    return new net.lightapi.portal.covid.CovidWebsiteUpdatedEvent.Builder();
  }

  /**
   * Creates a new CovidWebsiteUpdatedEvent RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new CovidWebsiteUpdatedEvent RecordBuilder
   */
  public static net.lightapi.portal.covid.CovidWebsiteUpdatedEvent.Builder newBuilder(net.lightapi.portal.covid.CovidWebsiteUpdatedEvent.Builder other) {
    if (other == null) {
      return new net.lightapi.portal.covid.CovidWebsiteUpdatedEvent.Builder();
    } else {
      return new net.lightapi.portal.covid.CovidWebsiteUpdatedEvent.Builder(other);
    }
  }

  /**
   * Creates a new CovidWebsiteUpdatedEvent RecordBuilder by copying an existing CovidWebsiteUpdatedEvent instance.
   * @param other The existing instance to copy.
   * @return A new CovidWebsiteUpdatedEvent RecordBuilder
   */
  public static net.lightapi.portal.covid.CovidWebsiteUpdatedEvent.Builder newBuilder(net.lightapi.portal.covid.CovidWebsiteUpdatedEvent other) {
    if (other == null) {
      return new net.lightapi.portal.covid.CovidWebsiteUpdatedEvent.Builder();
    } else {
      return new net.lightapi.portal.covid.CovidWebsiteUpdatedEvent.Builder(other);
    }
  }

  /**
   * RecordBuilder for CovidWebsiteUpdatedEvent instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<CovidWebsiteUpdatedEvent>
    implements org.apache.avro.data.RecordBuilder<CovidWebsiteUpdatedEvent> {

    private com.networknt.kafka.common.EventId EventId;
    private com.networknt.kafka.common.EventId.Builder EventIdBuilder;
    /** host id */
    private java.lang.String hostId;
    /** website in string format */
    private java.lang.String website;
    /** the unique user id to update map store */
    private java.lang.String userId;
    /** country of the user to update map store */
    private java.lang.String country;
    /** province of the user to update map store */
    private java.lang.String province;
    /** city of the user to update map store */
    private java.lang.String city;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(net.lightapi.portal.covid.CovidWebsiteUpdatedEvent.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.EventId)) {
        this.EventId = data().deepCopy(fields()[0].schema(), other.EventId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (other.hasEventIdBuilder()) {
        this.EventIdBuilder = com.networknt.kafka.common.EventId.newBuilder(other.getEventIdBuilder());
      }
      if (isValidValue(fields()[1], other.hostId)) {
        this.hostId = data().deepCopy(fields()[1].schema(), other.hostId);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.website)) {
        this.website = data().deepCopy(fields()[2].schema(), other.website);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.userId)) {
        this.userId = data().deepCopy(fields()[3].schema(), other.userId);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.country)) {
        this.country = data().deepCopy(fields()[4].schema(), other.country);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.province)) {
        this.province = data().deepCopy(fields()[5].schema(), other.province);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.city)) {
        this.city = data().deepCopy(fields()[6].schema(), other.city);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
    }

    /**
     * Creates a Builder by copying an existing CovidWebsiteUpdatedEvent instance
     * @param other The existing instance to copy.
     */
    private Builder(net.lightapi.portal.covid.CovidWebsiteUpdatedEvent other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.EventId)) {
        this.EventId = data().deepCopy(fields()[0].schema(), other.EventId);
        fieldSetFlags()[0] = true;
      }
      this.EventIdBuilder = null;
      if (isValidValue(fields()[1], other.hostId)) {
        this.hostId = data().deepCopy(fields()[1].schema(), other.hostId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.website)) {
        this.website = data().deepCopy(fields()[2].schema(), other.website);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.userId)) {
        this.userId = data().deepCopy(fields()[3].schema(), other.userId);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.country)) {
        this.country = data().deepCopy(fields()[4].schema(), other.country);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.province)) {
        this.province = data().deepCopy(fields()[5].schema(), other.province);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.city)) {
        this.city = data().deepCopy(fields()[6].schema(), other.city);
        fieldSetFlags()[6] = true;
      }
    }

    /**
      * Gets the value of the 'EventId' field.
      * @return The value.
      */
    public com.networknt.kafka.common.EventId getEventId() {
      return EventId;
    }


    /**
      * Sets the value of the 'EventId' field.
      * @param value The value of 'EventId'.
      * @return This builder.
      */
    public net.lightapi.portal.covid.CovidWebsiteUpdatedEvent.Builder setEventId(com.networknt.kafka.common.EventId value) {
      validate(fields()[0], value);
      this.EventIdBuilder = null;
      this.EventId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'EventId' field has been set.
      * @return True if the 'EventId' field has been set, false otherwise.
      */
    public boolean hasEventId() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'EventId' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.networknt.kafka.common.EventId.Builder getEventIdBuilder() {
      if (EventIdBuilder == null) {
        if (hasEventId()) {
          setEventIdBuilder(com.networknt.kafka.common.EventId.newBuilder(EventId));
        } else {
          setEventIdBuilder(com.networknt.kafka.common.EventId.newBuilder());
        }
      }
      return EventIdBuilder;
    }

    /**
     * Sets the Builder instance for the 'EventId' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public net.lightapi.portal.covid.CovidWebsiteUpdatedEvent.Builder setEventIdBuilder(com.networknt.kafka.common.EventId.Builder value) {
      clearEventId();
      EventIdBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'EventId' field has an active Builder instance
     * @return True if the 'EventId' field has an active Builder instance
     */
    public boolean hasEventIdBuilder() {
      return EventIdBuilder != null;
    }

    /**
      * Clears the value of the 'EventId' field.
      * @return This builder.
      */
    public net.lightapi.portal.covid.CovidWebsiteUpdatedEvent.Builder clearEventId() {
      EventId = null;
      EventIdBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'hostId' field.
      * host id
      * @return The value.
      */
    public java.lang.String getHostId() {
      return hostId;
    }


    /**
      * Sets the value of the 'hostId' field.
      * host id
      * @param value The value of 'hostId'.
      * @return This builder.
      */
    public net.lightapi.portal.covid.CovidWebsiteUpdatedEvent.Builder setHostId(java.lang.String value) {
      validate(fields()[1], value);
      this.hostId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'hostId' field has been set.
      * host id
      * @return True if the 'hostId' field has been set, false otherwise.
      */
    public boolean hasHostId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'hostId' field.
      * host id
      * @return This builder.
      */
    public net.lightapi.portal.covid.CovidWebsiteUpdatedEvent.Builder clearHostId() {
      hostId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'website' field.
      * website in string format
      * @return The value.
      */
    public java.lang.String getWebsite() {
      return website;
    }


    /**
      * Sets the value of the 'website' field.
      * website in string format
      * @param value The value of 'website'.
      * @return This builder.
      */
    public net.lightapi.portal.covid.CovidWebsiteUpdatedEvent.Builder setWebsite(java.lang.String value) {
      validate(fields()[2], value);
      this.website = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'website' field has been set.
      * website in string format
      * @return True if the 'website' field has been set, false otherwise.
      */
    public boolean hasWebsite() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'website' field.
      * website in string format
      * @return This builder.
      */
    public net.lightapi.portal.covid.CovidWebsiteUpdatedEvent.Builder clearWebsite() {
      website = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'userId' field.
      * the unique user id to update map store
      * @return The value.
      */
    public java.lang.String getUserId() {
      return userId;
    }


    /**
      * Sets the value of the 'userId' field.
      * the unique user id to update map store
      * @param value The value of 'userId'.
      * @return This builder.
      */
    public net.lightapi.portal.covid.CovidWebsiteUpdatedEvent.Builder setUserId(java.lang.String value) {
      validate(fields()[3], value);
      this.userId = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'userId' field has been set.
      * the unique user id to update map store
      * @return True if the 'userId' field has been set, false otherwise.
      */
    public boolean hasUserId() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'userId' field.
      * the unique user id to update map store
      * @return This builder.
      */
    public net.lightapi.portal.covid.CovidWebsiteUpdatedEvent.Builder clearUserId() {
      userId = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'country' field.
      * country of the user to update map store
      * @return The value.
      */
    public java.lang.String getCountry() {
      return country;
    }


    /**
      * Sets the value of the 'country' field.
      * country of the user to update map store
      * @param value The value of 'country'.
      * @return This builder.
      */
    public net.lightapi.portal.covid.CovidWebsiteUpdatedEvent.Builder setCountry(java.lang.String value) {
      validate(fields()[4], value);
      this.country = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'country' field has been set.
      * country of the user to update map store
      * @return True if the 'country' field has been set, false otherwise.
      */
    public boolean hasCountry() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'country' field.
      * country of the user to update map store
      * @return This builder.
      */
    public net.lightapi.portal.covid.CovidWebsiteUpdatedEvent.Builder clearCountry() {
      country = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'province' field.
      * province of the user to update map store
      * @return The value.
      */
    public java.lang.String getProvince() {
      return province;
    }


    /**
      * Sets the value of the 'province' field.
      * province of the user to update map store
      * @param value The value of 'province'.
      * @return This builder.
      */
    public net.lightapi.portal.covid.CovidWebsiteUpdatedEvent.Builder setProvince(java.lang.String value) {
      validate(fields()[5], value);
      this.province = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'province' field has been set.
      * province of the user to update map store
      * @return True if the 'province' field has been set, false otherwise.
      */
    public boolean hasProvince() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'province' field.
      * province of the user to update map store
      * @return This builder.
      */
    public net.lightapi.portal.covid.CovidWebsiteUpdatedEvent.Builder clearProvince() {
      province = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'city' field.
      * city of the user to update map store
      * @return The value.
      */
    public java.lang.String getCity() {
      return city;
    }


    /**
      * Sets the value of the 'city' field.
      * city of the user to update map store
      * @param value The value of 'city'.
      * @return This builder.
      */
    public net.lightapi.portal.covid.CovidWebsiteUpdatedEvent.Builder setCity(java.lang.String value) {
      validate(fields()[6], value);
      this.city = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'city' field has been set.
      * city of the user to update map store
      * @return True if the 'city' field has been set, false otherwise.
      */
    public boolean hasCity() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'city' field.
      * city of the user to update map store
      * @return This builder.
      */
    public net.lightapi.portal.covid.CovidWebsiteUpdatedEvent.Builder clearCity() {
      city = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public CovidWebsiteUpdatedEvent build() {
      try {
        CovidWebsiteUpdatedEvent record = new CovidWebsiteUpdatedEvent();
        if (EventIdBuilder != null) {
          try {
            record.EventId = this.EventIdBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("EventId"));
            throw e;
          }
        } else {
          record.EventId = fieldSetFlags()[0] ? this.EventId : (com.networknt.kafka.common.EventId) defaultValue(fields()[0]);
        }
        record.hostId = fieldSetFlags()[1] ? this.hostId : (java.lang.String) defaultValue(fields()[1]);
        record.website = fieldSetFlags()[2] ? this.website : (java.lang.String) defaultValue(fields()[2]);
        record.userId = fieldSetFlags()[3] ? this.userId : (java.lang.String) defaultValue(fields()[3]);
        record.country = fieldSetFlags()[4] ? this.country : (java.lang.String) defaultValue(fields()[4]);
        record.province = fieldSetFlags()[5] ? this.province : (java.lang.String) defaultValue(fields()[5]);
        record.city = fieldSetFlags()[6] ? this.city : (java.lang.String) defaultValue(fields()[6]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<CovidWebsiteUpdatedEvent>
    WRITER$ = (org.apache.avro.io.DatumWriter<CovidWebsiteUpdatedEvent>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<CovidWebsiteUpdatedEvent>
    READER$ = (org.apache.avro.io.DatumReader<CovidWebsiteUpdatedEvent>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    this.EventId.customEncode(out);

    out.writeString(this.hostId);

    out.writeString(this.website);

    out.writeString(this.userId);

    if (this.country == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.country);
    }

    if (this.province == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.province);
    }

    if (this.city == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.city);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (this.EventId == null) {
        this.EventId = new com.networknt.kafka.common.EventId();
      }
      this.EventId.customDecode(in);

      this.hostId = in.readString();

      this.website = in.readString();

      this.userId = in.readString();

      if (in.readIndex() != 1) {
        in.readNull();
        this.country = null;
      } else {
        this.country = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.province = null;
      } else {
        this.province = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.city = null;
      } else {
        this.city = in.readString();
      }

    } else {
      for (int i = 0; i < 7; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (this.EventId == null) {
            this.EventId = new com.networknt.kafka.common.EventId();
          }
          this.EventId.customDecode(in);
          break;

        case 1:
          this.hostId = in.readString();
          break;

        case 2:
          this.website = in.readString();
          break;

        case 3:
          this.userId = in.readString();
          break;

        case 4:
          if (in.readIndex() != 1) {
            in.readNull();
            this.country = null;
          } else {
            this.country = in.readString();
          }
          break;

        case 5:
          if (in.readIndex() != 1) {
            in.readNull();
            this.province = null;
          } else {
            this.province = in.readString();
          }
          break;

        case 6:
          if (in.readIndex() != 1) {
            in.readNull();
            this.city = null;
          } else {
            this.city = in.readString();
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}

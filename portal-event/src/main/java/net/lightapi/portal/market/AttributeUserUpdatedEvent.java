/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package net.lightapi.portal.market;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class AttributeUserUpdatedEvent extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 6290794773038789009L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AttributeUserUpdatedEvent\",\"namespace\":\"net.lightapi.portal.market\",\"fields\":[{\"name\":\"EventId\",\"type\":{\"type\":\"record\",\"name\":\"EventId\",\"namespace\":\"com.networknt.kafka.common\",\"fields\":[{\"name\":\"id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"a unique identifier\"},{\"name\":\"nonce\",\"type\":\"long\",\"doc\":\"the number of the transactions for the user\"},{\"name\":\"timestamp\",\"type\":\"long\",\"doc\":\"time the event is recorded\",\"default\":0},{\"name\":\"derived\",\"type\":\"boolean\",\"doc\":\"indicate if the event is derived from event processor\",\"default\":false}]}},{\"name\":\"hostId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"host id\"},{\"name\":\"attributeId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"attribute id\"},{\"name\":\"attributeValue\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"attribute value to be updated\"},{\"name\":\"userId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"user id\"},{\"name\":\"startTs\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"doc\":\"start timestamp UTC milliseconds since the epoch (nullable).\",\"default\":null},{\"name\":\"startTz\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"start time zone. (e.g., 'America/New_York') (nullable).\",\"default\":null},{\"name\":\"endTs\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"doc\":\"end timestamp UTC milliseconds since the epoch (nullable).\",\"default\":null},{\"name\":\"endTz\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"end time zone. (e.g., 'America/New_York') (nullable).\",\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimestampMillisConversion());
  }

  private static final BinaryMessageEncoder<AttributeUserUpdatedEvent> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<AttributeUserUpdatedEvent> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<AttributeUserUpdatedEvent> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<AttributeUserUpdatedEvent> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<AttributeUserUpdatedEvent> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this AttributeUserUpdatedEvent to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a AttributeUserUpdatedEvent from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a AttributeUserUpdatedEvent instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static AttributeUserUpdatedEvent fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private com.networknt.kafka.common.EventId EventId;
  /** host id */
  private java.lang.String hostId;
  /** attribute id */
  private java.lang.String attributeId;
  /** attribute value to be updated */
  private java.lang.String attributeValue;
  /** user id */
  private java.lang.String userId;
  /** start timestamp UTC milliseconds since the epoch (nullable). */
  private java.time.Instant startTs;
  /** start time zone. (e.g., 'America/New_York') (nullable). */
  private java.lang.String startTz;
  /** end timestamp UTC milliseconds since the epoch (nullable). */
  private java.time.Instant endTs;
  /** end time zone. (e.g., 'America/New_York') (nullable). */
  private java.lang.String endTz;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public AttributeUserUpdatedEvent() {}

  /**
   * All-args constructor.
   * @param EventId The new value for EventId
   * @param hostId host id
   * @param attributeId attribute id
   * @param attributeValue attribute value to be updated
   * @param userId user id
   * @param startTs start timestamp UTC milliseconds since the epoch (nullable).
   * @param startTz start time zone. (e.g., 'America/New_York') (nullable).
   * @param endTs end timestamp UTC milliseconds since the epoch (nullable).
   * @param endTz end time zone. (e.g., 'America/New_York') (nullable).
   */
  public AttributeUserUpdatedEvent(com.networknt.kafka.common.EventId EventId, java.lang.String hostId, java.lang.String attributeId, java.lang.String attributeValue, java.lang.String userId, java.time.Instant startTs, java.lang.String startTz, java.time.Instant endTs, java.lang.String endTz) {
    this.EventId = EventId;
    this.hostId = hostId;
    this.attributeId = attributeId;
    this.attributeValue = attributeValue;
    this.userId = userId;
    this.startTs = startTs;
    this.startTz = startTz;
    this.endTs = endTs;
    this.endTz = endTz;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return EventId;
    case 1: return hostId;
    case 2: return attributeId;
    case 3: return attributeValue;
    case 4: return userId;
    case 5: return startTs;
    case 6: return startTz;
    case 7: return endTs;
    case 8: return endTz;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: EventId = (com.networknt.kafka.common.EventId)value$; break;
    case 1: hostId = value$ != null ? value$.toString() : null; break;
    case 2: attributeId = value$ != null ? value$.toString() : null; break;
    case 3: attributeValue = value$ != null ? value$.toString() : null; break;
    case 4: userId = value$ != null ? value$.toString() : null; break;
    case 5: startTs = (java.time.Instant)value$; break;
    case 6: startTz = value$ != null ? value$.toString() : null; break;
    case 7: endTs = (java.time.Instant)value$; break;
    case 8: endTz = value$ != null ? value$.toString() : null; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'EventId' field.
   * @return The value of the 'EventId' field.
   */
  public com.networknt.kafka.common.EventId getEventId() {
    return EventId;
  }


  /**
   * Sets the value of the 'EventId' field.
   * @param value the value to set.
   */
  public void setEventId(com.networknt.kafka.common.EventId value) {
    this.EventId = value;
  }

  /**
   * Gets the value of the 'hostId' field.
   * @return host id
   */
  public java.lang.String getHostId() {
    return hostId;
  }


  /**
   * Sets the value of the 'hostId' field.
   * host id
   * @param value the value to set.
   */
  public void setHostId(java.lang.String value) {
    this.hostId = value;
  }

  /**
   * Gets the value of the 'attributeId' field.
   * @return attribute id
   */
  public java.lang.String getAttributeId() {
    return attributeId;
  }


  /**
   * Sets the value of the 'attributeId' field.
   * attribute id
   * @param value the value to set.
   */
  public void setAttributeId(java.lang.String value) {
    this.attributeId = value;
  }

  /**
   * Gets the value of the 'attributeValue' field.
   * @return attribute value to be updated
   */
  public java.lang.String getAttributeValue() {
    return attributeValue;
  }


  /**
   * Sets the value of the 'attributeValue' field.
   * attribute value to be updated
   * @param value the value to set.
   */
  public void setAttributeValue(java.lang.String value) {
    this.attributeValue = value;
  }

  /**
   * Gets the value of the 'userId' field.
   * @return user id
   */
  public java.lang.String getUserId() {
    return userId;
  }


  /**
   * Sets the value of the 'userId' field.
   * user id
   * @param value the value to set.
   */
  public void setUserId(java.lang.String value) {
    this.userId = value;
  }

  /**
   * Gets the value of the 'startTs' field.
   * @return start timestamp UTC milliseconds since the epoch (nullable).
   */
  public java.time.Instant getStartTs() {
    return startTs;
  }


  /**
   * Sets the value of the 'startTs' field.
   * start timestamp UTC milliseconds since the epoch (nullable).
   * @param value the value to set.
   */
  public void setStartTs(java.time.Instant value) {
    this.startTs = value;
  }

  /**
   * Gets the value of the 'startTz' field.
   * @return start time zone. (e.g., 'America/New_York') (nullable).
   */
  public java.lang.String getStartTz() {
    return startTz;
  }


  /**
   * Sets the value of the 'startTz' field.
   * start time zone. (e.g., 'America/New_York') (nullable).
   * @param value the value to set.
   */
  public void setStartTz(java.lang.String value) {
    this.startTz = value;
  }

  /**
   * Gets the value of the 'endTs' field.
   * @return end timestamp UTC milliseconds since the epoch (nullable).
   */
  public java.time.Instant getEndTs() {
    return endTs;
  }


  /**
   * Sets the value of the 'endTs' field.
   * end timestamp UTC milliseconds since the epoch (nullable).
   * @param value the value to set.
   */
  public void setEndTs(java.time.Instant value) {
    this.endTs = value;
  }

  /**
   * Gets the value of the 'endTz' field.
   * @return end time zone. (e.g., 'America/New_York') (nullable).
   */
  public java.lang.String getEndTz() {
    return endTz;
  }


  /**
   * Sets the value of the 'endTz' field.
   * end time zone. (e.g., 'America/New_York') (nullable).
   * @param value the value to set.
   */
  public void setEndTz(java.lang.String value) {
    this.endTz = value;
  }

  /**
   * Creates a new AttributeUserUpdatedEvent RecordBuilder.
   * @return A new AttributeUserUpdatedEvent RecordBuilder
   */
  public static net.lightapi.portal.market.AttributeUserUpdatedEvent.Builder newBuilder() {
    return new net.lightapi.portal.market.AttributeUserUpdatedEvent.Builder();
  }

  /**
   * Creates a new AttributeUserUpdatedEvent RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new AttributeUserUpdatedEvent RecordBuilder
   */
  public static net.lightapi.portal.market.AttributeUserUpdatedEvent.Builder newBuilder(net.lightapi.portal.market.AttributeUserUpdatedEvent.Builder other) {
    if (other == null) {
      return new net.lightapi.portal.market.AttributeUserUpdatedEvent.Builder();
    } else {
      return new net.lightapi.portal.market.AttributeUserUpdatedEvent.Builder(other);
    }
  }

  /**
   * Creates a new AttributeUserUpdatedEvent RecordBuilder by copying an existing AttributeUserUpdatedEvent instance.
   * @param other The existing instance to copy.
   * @return A new AttributeUserUpdatedEvent RecordBuilder
   */
  public static net.lightapi.portal.market.AttributeUserUpdatedEvent.Builder newBuilder(net.lightapi.portal.market.AttributeUserUpdatedEvent other) {
    if (other == null) {
      return new net.lightapi.portal.market.AttributeUserUpdatedEvent.Builder();
    } else {
      return new net.lightapi.portal.market.AttributeUserUpdatedEvent.Builder(other);
    }
  }

  /**
   * RecordBuilder for AttributeUserUpdatedEvent instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AttributeUserUpdatedEvent>
    implements org.apache.avro.data.RecordBuilder<AttributeUserUpdatedEvent> {

    private com.networknt.kafka.common.EventId EventId;
    private com.networknt.kafka.common.EventId.Builder EventIdBuilder;
    /** host id */
    private java.lang.String hostId;
    /** attribute id */
    private java.lang.String attributeId;
    /** attribute value to be updated */
    private java.lang.String attributeValue;
    /** user id */
    private java.lang.String userId;
    /** start timestamp UTC milliseconds since the epoch (nullable). */
    private java.time.Instant startTs;
    /** start time zone. (e.g., 'America/New_York') (nullable). */
    private java.lang.String startTz;
    /** end timestamp UTC milliseconds since the epoch (nullable). */
    private java.time.Instant endTs;
    /** end time zone. (e.g., 'America/New_York') (nullable). */
    private java.lang.String endTz;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(net.lightapi.portal.market.AttributeUserUpdatedEvent.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.EventId)) {
        this.EventId = data().deepCopy(fields()[0].schema(), other.EventId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (other.hasEventIdBuilder()) {
        this.EventIdBuilder = com.networknt.kafka.common.EventId.newBuilder(other.getEventIdBuilder());
      }
      if (isValidValue(fields()[1], other.hostId)) {
        this.hostId = data().deepCopy(fields()[1].schema(), other.hostId);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.attributeId)) {
        this.attributeId = data().deepCopy(fields()[2].schema(), other.attributeId);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.attributeValue)) {
        this.attributeValue = data().deepCopy(fields()[3].schema(), other.attributeValue);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.userId)) {
        this.userId = data().deepCopy(fields()[4].schema(), other.userId);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.startTs)) {
        this.startTs = data().deepCopy(fields()[5].schema(), other.startTs);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.startTz)) {
        this.startTz = data().deepCopy(fields()[6].schema(), other.startTz);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.endTs)) {
        this.endTs = data().deepCopy(fields()[7].schema(), other.endTs);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.endTz)) {
        this.endTz = data().deepCopy(fields()[8].schema(), other.endTz);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
    }

    /**
     * Creates a Builder by copying an existing AttributeUserUpdatedEvent instance
     * @param other The existing instance to copy.
     */
    private Builder(net.lightapi.portal.market.AttributeUserUpdatedEvent other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.EventId)) {
        this.EventId = data().deepCopy(fields()[0].schema(), other.EventId);
        fieldSetFlags()[0] = true;
      }
      this.EventIdBuilder = null;
      if (isValidValue(fields()[1], other.hostId)) {
        this.hostId = data().deepCopy(fields()[1].schema(), other.hostId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.attributeId)) {
        this.attributeId = data().deepCopy(fields()[2].schema(), other.attributeId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.attributeValue)) {
        this.attributeValue = data().deepCopy(fields()[3].schema(), other.attributeValue);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.userId)) {
        this.userId = data().deepCopy(fields()[4].schema(), other.userId);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.startTs)) {
        this.startTs = data().deepCopy(fields()[5].schema(), other.startTs);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.startTz)) {
        this.startTz = data().deepCopy(fields()[6].schema(), other.startTz);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.endTs)) {
        this.endTs = data().deepCopy(fields()[7].schema(), other.endTs);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.endTz)) {
        this.endTz = data().deepCopy(fields()[8].schema(), other.endTz);
        fieldSetFlags()[8] = true;
      }
    }

    /**
      * Gets the value of the 'EventId' field.
      * @return The value.
      */
    public com.networknt.kafka.common.EventId getEventId() {
      return EventId;
    }


    /**
      * Sets the value of the 'EventId' field.
      * @param value The value of 'EventId'.
      * @return This builder.
      */
    public net.lightapi.portal.market.AttributeUserUpdatedEvent.Builder setEventId(com.networknt.kafka.common.EventId value) {
      validate(fields()[0], value);
      this.EventIdBuilder = null;
      this.EventId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'EventId' field has been set.
      * @return True if the 'EventId' field has been set, false otherwise.
      */
    public boolean hasEventId() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'EventId' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.networknt.kafka.common.EventId.Builder getEventIdBuilder() {
      if (EventIdBuilder == null) {
        if (hasEventId()) {
          setEventIdBuilder(com.networknt.kafka.common.EventId.newBuilder(EventId));
        } else {
          setEventIdBuilder(com.networknt.kafka.common.EventId.newBuilder());
        }
      }
      return EventIdBuilder;
    }

    /**
     * Sets the Builder instance for the 'EventId' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public net.lightapi.portal.market.AttributeUserUpdatedEvent.Builder setEventIdBuilder(com.networknt.kafka.common.EventId.Builder value) {
      clearEventId();
      EventIdBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'EventId' field has an active Builder instance
     * @return True if the 'EventId' field has an active Builder instance
     */
    public boolean hasEventIdBuilder() {
      return EventIdBuilder != null;
    }

    /**
      * Clears the value of the 'EventId' field.
      * @return This builder.
      */
    public net.lightapi.portal.market.AttributeUserUpdatedEvent.Builder clearEventId() {
      EventId = null;
      EventIdBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'hostId' field.
      * host id
      * @return The value.
      */
    public java.lang.String getHostId() {
      return hostId;
    }


    /**
      * Sets the value of the 'hostId' field.
      * host id
      * @param value The value of 'hostId'.
      * @return This builder.
      */
    public net.lightapi.portal.market.AttributeUserUpdatedEvent.Builder setHostId(java.lang.String value) {
      validate(fields()[1], value);
      this.hostId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'hostId' field has been set.
      * host id
      * @return True if the 'hostId' field has been set, false otherwise.
      */
    public boolean hasHostId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'hostId' field.
      * host id
      * @return This builder.
      */
    public net.lightapi.portal.market.AttributeUserUpdatedEvent.Builder clearHostId() {
      hostId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'attributeId' field.
      * attribute id
      * @return The value.
      */
    public java.lang.String getAttributeId() {
      return attributeId;
    }


    /**
      * Sets the value of the 'attributeId' field.
      * attribute id
      * @param value The value of 'attributeId'.
      * @return This builder.
      */
    public net.lightapi.portal.market.AttributeUserUpdatedEvent.Builder setAttributeId(java.lang.String value) {
      validate(fields()[2], value);
      this.attributeId = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'attributeId' field has been set.
      * attribute id
      * @return True if the 'attributeId' field has been set, false otherwise.
      */
    public boolean hasAttributeId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'attributeId' field.
      * attribute id
      * @return This builder.
      */
    public net.lightapi.portal.market.AttributeUserUpdatedEvent.Builder clearAttributeId() {
      attributeId = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'attributeValue' field.
      * attribute value to be updated
      * @return The value.
      */
    public java.lang.String getAttributeValue() {
      return attributeValue;
    }


    /**
      * Sets the value of the 'attributeValue' field.
      * attribute value to be updated
      * @param value The value of 'attributeValue'.
      * @return This builder.
      */
    public net.lightapi.portal.market.AttributeUserUpdatedEvent.Builder setAttributeValue(java.lang.String value) {
      validate(fields()[3], value);
      this.attributeValue = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'attributeValue' field has been set.
      * attribute value to be updated
      * @return True if the 'attributeValue' field has been set, false otherwise.
      */
    public boolean hasAttributeValue() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'attributeValue' field.
      * attribute value to be updated
      * @return This builder.
      */
    public net.lightapi.portal.market.AttributeUserUpdatedEvent.Builder clearAttributeValue() {
      attributeValue = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'userId' field.
      * user id
      * @return The value.
      */
    public java.lang.String getUserId() {
      return userId;
    }


    /**
      * Sets the value of the 'userId' field.
      * user id
      * @param value The value of 'userId'.
      * @return This builder.
      */
    public net.lightapi.portal.market.AttributeUserUpdatedEvent.Builder setUserId(java.lang.String value) {
      validate(fields()[4], value);
      this.userId = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'userId' field has been set.
      * user id
      * @return True if the 'userId' field has been set, false otherwise.
      */
    public boolean hasUserId() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'userId' field.
      * user id
      * @return This builder.
      */
    public net.lightapi.portal.market.AttributeUserUpdatedEvent.Builder clearUserId() {
      userId = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'startTs' field.
      * start timestamp UTC milliseconds since the epoch (nullable).
      * @return The value.
      */
    public java.time.Instant getStartTs() {
      return startTs;
    }


    /**
      * Sets the value of the 'startTs' field.
      * start timestamp UTC milliseconds since the epoch (nullable).
      * @param value The value of 'startTs'.
      * @return This builder.
      */
    public net.lightapi.portal.market.AttributeUserUpdatedEvent.Builder setStartTs(java.time.Instant value) {
      validate(fields()[5], value);
      this.startTs = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'startTs' field has been set.
      * start timestamp UTC milliseconds since the epoch (nullable).
      * @return True if the 'startTs' field has been set, false otherwise.
      */
    public boolean hasStartTs() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'startTs' field.
      * start timestamp UTC milliseconds since the epoch (nullable).
      * @return This builder.
      */
    public net.lightapi.portal.market.AttributeUserUpdatedEvent.Builder clearStartTs() {
      startTs = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'startTz' field.
      * start time zone. (e.g., 'America/New_York') (nullable).
      * @return The value.
      */
    public java.lang.String getStartTz() {
      return startTz;
    }


    /**
      * Sets the value of the 'startTz' field.
      * start time zone. (e.g., 'America/New_York') (nullable).
      * @param value The value of 'startTz'.
      * @return This builder.
      */
    public net.lightapi.portal.market.AttributeUserUpdatedEvent.Builder setStartTz(java.lang.String value) {
      validate(fields()[6], value);
      this.startTz = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'startTz' field has been set.
      * start time zone. (e.g., 'America/New_York') (nullable).
      * @return True if the 'startTz' field has been set, false otherwise.
      */
    public boolean hasStartTz() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'startTz' field.
      * start time zone. (e.g., 'America/New_York') (nullable).
      * @return This builder.
      */
    public net.lightapi.portal.market.AttributeUserUpdatedEvent.Builder clearStartTz() {
      startTz = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'endTs' field.
      * end timestamp UTC milliseconds since the epoch (nullable).
      * @return The value.
      */
    public java.time.Instant getEndTs() {
      return endTs;
    }


    /**
      * Sets the value of the 'endTs' field.
      * end timestamp UTC milliseconds since the epoch (nullable).
      * @param value The value of 'endTs'.
      * @return This builder.
      */
    public net.lightapi.portal.market.AttributeUserUpdatedEvent.Builder setEndTs(java.time.Instant value) {
      validate(fields()[7], value);
      this.endTs = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'endTs' field has been set.
      * end timestamp UTC milliseconds since the epoch (nullable).
      * @return True if the 'endTs' field has been set, false otherwise.
      */
    public boolean hasEndTs() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'endTs' field.
      * end timestamp UTC milliseconds since the epoch (nullable).
      * @return This builder.
      */
    public net.lightapi.portal.market.AttributeUserUpdatedEvent.Builder clearEndTs() {
      endTs = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'endTz' field.
      * end time zone. (e.g., 'America/New_York') (nullable).
      * @return The value.
      */
    public java.lang.String getEndTz() {
      return endTz;
    }


    /**
      * Sets the value of the 'endTz' field.
      * end time zone. (e.g., 'America/New_York') (nullable).
      * @param value The value of 'endTz'.
      * @return This builder.
      */
    public net.lightapi.portal.market.AttributeUserUpdatedEvent.Builder setEndTz(java.lang.String value) {
      validate(fields()[8], value);
      this.endTz = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'endTz' field has been set.
      * end time zone. (e.g., 'America/New_York') (nullable).
      * @return True if the 'endTz' field has been set, false otherwise.
      */
    public boolean hasEndTz() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'endTz' field.
      * end time zone. (e.g., 'America/New_York') (nullable).
      * @return This builder.
      */
    public net.lightapi.portal.market.AttributeUserUpdatedEvent.Builder clearEndTz() {
      endTz = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public AttributeUserUpdatedEvent build() {
      try {
        AttributeUserUpdatedEvent record = new AttributeUserUpdatedEvent();
        if (EventIdBuilder != null) {
          try {
            record.EventId = this.EventIdBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("EventId"));
            throw e;
          }
        } else {
          record.EventId = fieldSetFlags()[0] ? this.EventId : (com.networknt.kafka.common.EventId) defaultValue(fields()[0]);
        }
        record.hostId = fieldSetFlags()[1] ? this.hostId : (java.lang.String) defaultValue(fields()[1]);
        record.attributeId = fieldSetFlags()[2] ? this.attributeId : (java.lang.String) defaultValue(fields()[2]);
        record.attributeValue = fieldSetFlags()[3] ? this.attributeValue : (java.lang.String) defaultValue(fields()[3]);
        record.userId = fieldSetFlags()[4] ? this.userId : (java.lang.String) defaultValue(fields()[4]);
        record.startTs = fieldSetFlags()[5] ? this.startTs : (java.time.Instant) defaultValue(fields()[5]);
        record.startTz = fieldSetFlags()[6] ? this.startTz : (java.lang.String) defaultValue(fields()[6]);
        record.endTs = fieldSetFlags()[7] ? this.endTs : (java.time.Instant) defaultValue(fields()[7]);
        record.endTz = fieldSetFlags()[8] ? this.endTz : (java.lang.String) defaultValue(fields()[8]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<AttributeUserUpdatedEvent>
    WRITER$ = (org.apache.avro.io.DatumWriter<AttributeUserUpdatedEvent>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<AttributeUserUpdatedEvent>
    READER$ = (org.apache.avro.io.DatumReader<AttributeUserUpdatedEvent>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}











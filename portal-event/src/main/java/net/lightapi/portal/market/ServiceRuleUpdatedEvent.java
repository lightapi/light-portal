/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package net.lightapi.portal.market;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class ServiceRuleUpdatedEvent extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -8222939804965518796L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ServiceRuleUpdatedEvent\",\"namespace\":\"net.lightapi.portal.market\",\"fields\":[{\"name\":\"EventId\",\"type\":{\"type\":\"record\",\"name\":\"EventId\",\"namespace\":\"com.networknt.kafka.common\",\"fields\":[{\"name\":\"id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"a unique identifier\"},{\"name\":\"nonce\",\"type\":\"long\",\"doc\":\"the number of the transactions for the user\"},{\"name\":\"timestamp\",\"type\":\"long\",\"doc\":\"time the event is recorded\",\"default\":0},{\"name\":\"derived\",\"type\":\"boolean\",\"doc\":\"indicate if the event is derived from event processor\",\"default\":false}]}},{\"name\":\"hostId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"host id\"},{\"name\":\"serviceId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"service id\"},{\"name\":\"endpoint\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"service endpoint\"},{\"name\":\"ruleType\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"rule type\"},{\"name\":\"rules\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"ServiceRule\",\"fields\":[{\"name\":\"ruleId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"rule id\"},{\"name\":\"roles\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}],\"doc\":\"roles that accesses the endpoint\",\"default\":null},{\"name\":\"variables\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"rule variables if any\",\"default\":null}]}},\"doc\":\"service rules\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<ServiceRuleUpdatedEvent> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<ServiceRuleUpdatedEvent> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<ServiceRuleUpdatedEvent> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<ServiceRuleUpdatedEvent> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<ServiceRuleUpdatedEvent> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this ServiceRuleUpdatedEvent to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a ServiceRuleUpdatedEvent from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a ServiceRuleUpdatedEvent instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static ServiceRuleUpdatedEvent fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private com.networknt.kafka.common.EventId EventId;
  /** host id */
  private java.lang.String hostId;
  /** service id */
  private java.lang.String serviceId;
  /** service endpoint */
  private java.lang.String endpoint;
  /** rule type */
  private java.lang.String ruleType;
  /** service rules */
  private java.util.List<net.lightapi.portal.market.ServiceRule> rules;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ServiceRuleUpdatedEvent() {}

  /**
   * All-args constructor.
   * @param EventId The new value for EventId
   * @param hostId host id
   * @param serviceId service id
   * @param endpoint service endpoint
   * @param ruleType rule type
   * @param rules service rules
   */
  public ServiceRuleUpdatedEvent(com.networknt.kafka.common.EventId EventId, java.lang.String hostId, java.lang.String serviceId, java.lang.String endpoint, java.lang.String ruleType, java.util.List<net.lightapi.portal.market.ServiceRule> rules) {
    this.EventId = EventId;
    this.hostId = hostId;
    this.serviceId = serviceId;
    this.endpoint = endpoint;
    this.ruleType = ruleType;
    this.rules = rules;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return EventId;
    case 1: return hostId;
    case 2: return serviceId;
    case 3: return endpoint;
    case 4: return ruleType;
    case 5: return rules;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: EventId = (com.networknt.kafka.common.EventId)value$; break;
    case 1: hostId = value$ != null ? value$.toString() : null; break;
    case 2: serviceId = value$ != null ? value$.toString() : null; break;
    case 3: endpoint = value$ != null ? value$.toString() : null; break;
    case 4: ruleType = value$ != null ? value$.toString() : null; break;
    case 5: rules = (java.util.List<net.lightapi.portal.market.ServiceRule>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'EventId' field.
   * @return The value of the 'EventId' field.
   */
  public com.networknt.kafka.common.EventId getEventId() {
    return EventId;
  }


  /**
   * Sets the value of the 'EventId' field.
   * @param value the value to set.
   */
  public void setEventId(com.networknt.kafka.common.EventId value) {
    this.EventId = value;
  }

  /**
   * Gets the value of the 'hostId' field.
   * @return host id
   */
  public java.lang.String getHostId() {
    return hostId;
  }


  /**
   * Sets the value of the 'hostId' field.
   * host id
   * @param value the value to set.
   */
  public void setHostId(java.lang.String value) {
    this.hostId = value;
  }

  /**
   * Gets the value of the 'serviceId' field.
   * @return service id
   */
  public java.lang.String getServiceId() {
    return serviceId;
  }


  /**
   * Sets the value of the 'serviceId' field.
   * service id
   * @param value the value to set.
   */
  public void setServiceId(java.lang.String value) {
    this.serviceId = value;
  }

  /**
   * Gets the value of the 'endpoint' field.
   * @return service endpoint
   */
  public java.lang.String getEndpoint() {
    return endpoint;
  }


  /**
   * Sets the value of the 'endpoint' field.
   * service endpoint
   * @param value the value to set.
   */
  public void setEndpoint(java.lang.String value) {
    this.endpoint = value;
  }

  /**
   * Gets the value of the 'ruleType' field.
   * @return rule type
   */
  public java.lang.String getRuleType() {
    return ruleType;
  }


  /**
   * Sets the value of the 'ruleType' field.
   * rule type
   * @param value the value to set.
   */
  public void setRuleType(java.lang.String value) {
    this.ruleType = value;
  }

  /**
   * Gets the value of the 'rules' field.
   * @return service rules
   */
  public java.util.List<net.lightapi.portal.market.ServiceRule> getRules() {
    return rules;
  }


  /**
   * Sets the value of the 'rules' field.
   * service rules
   * @param value the value to set.
   */
  public void setRules(java.util.List<net.lightapi.portal.market.ServiceRule> value) {
    this.rules = value;
  }

  /**
   * Creates a new ServiceRuleUpdatedEvent RecordBuilder.
   * @return A new ServiceRuleUpdatedEvent RecordBuilder
   */
  public static net.lightapi.portal.market.ServiceRuleUpdatedEvent.Builder newBuilder() {
    return new net.lightapi.portal.market.ServiceRuleUpdatedEvent.Builder();
  }

  /**
   * Creates a new ServiceRuleUpdatedEvent RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ServiceRuleUpdatedEvent RecordBuilder
   */
  public static net.lightapi.portal.market.ServiceRuleUpdatedEvent.Builder newBuilder(net.lightapi.portal.market.ServiceRuleUpdatedEvent.Builder other) {
    if (other == null) {
      return new net.lightapi.portal.market.ServiceRuleUpdatedEvent.Builder();
    } else {
      return new net.lightapi.portal.market.ServiceRuleUpdatedEvent.Builder(other);
    }
  }

  /**
   * Creates a new ServiceRuleUpdatedEvent RecordBuilder by copying an existing ServiceRuleUpdatedEvent instance.
   * @param other The existing instance to copy.
   * @return A new ServiceRuleUpdatedEvent RecordBuilder
   */
  public static net.lightapi.portal.market.ServiceRuleUpdatedEvent.Builder newBuilder(net.lightapi.portal.market.ServiceRuleUpdatedEvent other) {
    if (other == null) {
      return new net.lightapi.portal.market.ServiceRuleUpdatedEvent.Builder();
    } else {
      return new net.lightapi.portal.market.ServiceRuleUpdatedEvent.Builder(other);
    }
  }

  /**
   * RecordBuilder for ServiceRuleUpdatedEvent instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ServiceRuleUpdatedEvent>
    implements org.apache.avro.data.RecordBuilder<ServiceRuleUpdatedEvent> {

    private com.networknt.kafka.common.EventId EventId;
    private com.networknt.kafka.common.EventId.Builder EventIdBuilder;
    /** host id */
    private java.lang.String hostId;
    /** service id */
    private java.lang.String serviceId;
    /** service endpoint */
    private java.lang.String endpoint;
    /** rule type */
    private java.lang.String ruleType;
    /** service rules */
    private java.util.List<net.lightapi.portal.market.ServiceRule> rules;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(net.lightapi.portal.market.ServiceRuleUpdatedEvent.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.EventId)) {
        this.EventId = data().deepCopy(fields()[0].schema(), other.EventId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (other.hasEventIdBuilder()) {
        this.EventIdBuilder = com.networknt.kafka.common.EventId.newBuilder(other.getEventIdBuilder());
      }
      if (isValidValue(fields()[1], other.hostId)) {
        this.hostId = data().deepCopy(fields()[1].schema(), other.hostId);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.serviceId)) {
        this.serviceId = data().deepCopy(fields()[2].schema(), other.serviceId);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.endpoint)) {
        this.endpoint = data().deepCopy(fields()[3].schema(), other.endpoint);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.ruleType)) {
        this.ruleType = data().deepCopy(fields()[4].schema(), other.ruleType);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.rules)) {
        this.rules = data().deepCopy(fields()[5].schema(), other.rules);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
    }

    /**
     * Creates a Builder by copying an existing ServiceRuleUpdatedEvent instance
     * @param other The existing instance to copy.
     */
    private Builder(net.lightapi.portal.market.ServiceRuleUpdatedEvent other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.EventId)) {
        this.EventId = data().deepCopy(fields()[0].schema(), other.EventId);
        fieldSetFlags()[0] = true;
      }
      this.EventIdBuilder = null;
      if (isValidValue(fields()[1], other.hostId)) {
        this.hostId = data().deepCopy(fields()[1].schema(), other.hostId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.serviceId)) {
        this.serviceId = data().deepCopy(fields()[2].schema(), other.serviceId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.endpoint)) {
        this.endpoint = data().deepCopy(fields()[3].schema(), other.endpoint);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.ruleType)) {
        this.ruleType = data().deepCopy(fields()[4].schema(), other.ruleType);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.rules)) {
        this.rules = data().deepCopy(fields()[5].schema(), other.rules);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'EventId' field.
      * @return The value.
      */
    public com.networknt.kafka.common.EventId getEventId() {
      return EventId;
    }


    /**
      * Sets the value of the 'EventId' field.
      * @param value The value of 'EventId'.
      * @return This builder.
      */
    public net.lightapi.portal.market.ServiceRuleUpdatedEvent.Builder setEventId(com.networknt.kafka.common.EventId value) {
      validate(fields()[0], value);
      this.EventIdBuilder = null;
      this.EventId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'EventId' field has been set.
      * @return True if the 'EventId' field has been set, false otherwise.
      */
    public boolean hasEventId() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'EventId' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.networknt.kafka.common.EventId.Builder getEventIdBuilder() {
      if (EventIdBuilder == null) {
        if (hasEventId()) {
          setEventIdBuilder(com.networknt.kafka.common.EventId.newBuilder(EventId));
        } else {
          setEventIdBuilder(com.networknt.kafka.common.EventId.newBuilder());
        }
      }
      return EventIdBuilder;
    }

    /**
     * Sets the Builder instance for the 'EventId' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public net.lightapi.portal.market.ServiceRuleUpdatedEvent.Builder setEventIdBuilder(com.networknt.kafka.common.EventId.Builder value) {
      clearEventId();
      EventIdBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'EventId' field has an active Builder instance
     * @return True if the 'EventId' field has an active Builder instance
     */
    public boolean hasEventIdBuilder() {
      return EventIdBuilder != null;
    }

    /**
      * Clears the value of the 'EventId' field.
      * @return This builder.
      */
    public net.lightapi.portal.market.ServiceRuleUpdatedEvent.Builder clearEventId() {
      EventId = null;
      EventIdBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'hostId' field.
      * host id
      * @return The value.
      */
    public java.lang.String getHostId() {
      return hostId;
    }


    /**
      * Sets the value of the 'hostId' field.
      * host id
      * @param value The value of 'hostId'.
      * @return This builder.
      */
    public net.lightapi.portal.market.ServiceRuleUpdatedEvent.Builder setHostId(java.lang.String value) {
      validate(fields()[1], value);
      this.hostId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'hostId' field has been set.
      * host id
      * @return True if the 'hostId' field has been set, false otherwise.
      */
    public boolean hasHostId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'hostId' field.
      * host id
      * @return This builder.
      */
    public net.lightapi.portal.market.ServiceRuleUpdatedEvent.Builder clearHostId() {
      hostId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'serviceId' field.
      * service id
      * @return The value.
      */
    public java.lang.String getServiceId() {
      return serviceId;
    }


    /**
      * Sets the value of the 'serviceId' field.
      * service id
      * @param value The value of 'serviceId'.
      * @return This builder.
      */
    public net.lightapi.portal.market.ServiceRuleUpdatedEvent.Builder setServiceId(java.lang.String value) {
      validate(fields()[2], value);
      this.serviceId = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'serviceId' field has been set.
      * service id
      * @return True if the 'serviceId' field has been set, false otherwise.
      */
    public boolean hasServiceId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'serviceId' field.
      * service id
      * @return This builder.
      */
    public net.lightapi.portal.market.ServiceRuleUpdatedEvent.Builder clearServiceId() {
      serviceId = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'endpoint' field.
      * service endpoint
      * @return The value.
      */
    public java.lang.String getEndpoint() {
      return endpoint;
    }


    /**
      * Sets the value of the 'endpoint' field.
      * service endpoint
      * @param value The value of 'endpoint'.
      * @return This builder.
      */
    public net.lightapi.portal.market.ServiceRuleUpdatedEvent.Builder setEndpoint(java.lang.String value) {
      validate(fields()[3], value);
      this.endpoint = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'endpoint' field has been set.
      * service endpoint
      * @return True if the 'endpoint' field has been set, false otherwise.
      */
    public boolean hasEndpoint() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'endpoint' field.
      * service endpoint
      * @return This builder.
      */
    public net.lightapi.portal.market.ServiceRuleUpdatedEvent.Builder clearEndpoint() {
      endpoint = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'ruleType' field.
      * rule type
      * @return The value.
      */
    public java.lang.String getRuleType() {
      return ruleType;
    }


    /**
      * Sets the value of the 'ruleType' field.
      * rule type
      * @param value The value of 'ruleType'.
      * @return This builder.
      */
    public net.lightapi.portal.market.ServiceRuleUpdatedEvent.Builder setRuleType(java.lang.String value) {
      validate(fields()[4], value);
      this.ruleType = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'ruleType' field has been set.
      * rule type
      * @return True if the 'ruleType' field has been set, false otherwise.
      */
    public boolean hasRuleType() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'ruleType' field.
      * rule type
      * @return This builder.
      */
    public net.lightapi.portal.market.ServiceRuleUpdatedEvent.Builder clearRuleType() {
      ruleType = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'rules' field.
      * service rules
      * @return The value.
      */
    public java.util.List<net.lightapi.portal.market.ServiceRule> getRules() {
      return rules;
    }


    /**
      * Sets the value of the 'rules' field.
      * service rules
      * @param value The value of 'rules'.
      * @return This builder.
      */
    public net.lightapi.portal.market.ServiceRuleUpdatedEvent.Builder setRules(java.util.List<net.lightapi.portal.market.ServiceRule> value) {
      validate(fields()[5], value);
      this.rules = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'rules' field has been set.
      * service rules
      * @return True if the 'rules' field has been set, false otherwise.
      */
    public boolean hasRules() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'rules' field.
      * service rules
      * @return This builder.
      */
    public net.lightapi.portal.market.ServiceRuleUpdatedEvent.Builder clearRules() {
      rules = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public ServiceRuleUpdatedEvent build() {
      try {
        ServiceRuleUpdatedEvent record = new ServiceRuleUpdatedEvent();
        if (EventIdBuilder != null) {
          try {
            record.EventId = this.EventIdBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("EventId"));
            throw e;
          }
        } else {
          record.EventId = fieldSetFlags()[0] ? this.EventId : (com.networknt.kafka.common.EventId) defaultValue(fields()[0]);
        }
        record.hostId = fieldSetFlags()[1] ? this.hostId : (java.lang.String) defaultValue(fields()[1]);
        record.serviceId = fieldSetFlags()[2] ? this.serviceId : (java.lang.String) defaultValue(fields()[2]);
        record.endpoint = fieldSetFlags()[3] ? this.endpoint : (java.lang.String) defaultValue(fields()[3]);
        record.ruleType = fieldSetFlags()[4] ? this.ruleType : (java.lang.String) defaultValue(fields()[4]);
        record.rules = fieldSetFlags()[5] ? this.rules : (java.util.List<net.lightapi.portal.market.ServiceRule>) defaultValue(fields()[5]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<ServiceRuleUpdatedEvent>
    WRITER$ = (org.apache.avro.io.DatumWriter<ServiceRuleUpdatedEvent>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<ServiceRuleUpdatedEvent>
    READER$ = (org.apache.avro.io.DatumReader<ServiceRuleUpdatedEvent>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    this.EventId.customEncode(out);

    out.writeString(this.hostId);

    out.writeString(this.serviceId);

    out.writeString(this.endpoint);

    out.writeString(this.ruleType);

    long size0 = this.rules.size();
    out.writeArrayStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (net.lightapi.portal.market.ServiceRule e0: this.rules) {
      actualSize0++;
      out.startItem();
      e0.customEncode(out);
    }
    out.writeArrayEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (this.EventId == null) {
        this.EventId = new com.networknt.kafka.common.EventId();
      }
      this.EventId.customDecode(in);

      this.hostId = in.readString();

      this.serviceId = in.readString();

      this.endpoint = in.readString();

      this.ruleType = in.readString();

      long size0 = in.readArrayStart();
      java.util.List<net.lightapi.portal.market.ServiceRule> a0 = this.rules;
      if (a0 == null) {
        a0 = new SpecificData.Array<net.lightapi.portal.market.ServiceRule>((int)size0, SCHEMA$.getField("rules").schema());
        this.rules = a0;
      } else a0.clear();
      SpecificData.Array<net.lightapi.portal.market.ServiceRule> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<net.lightapi.portal.market.ServiceRule>)a0 : null);
      for ( ; 0 < size0; size0 = in.arrayNext()) {
        for ( ; size0 != 0; size0--) {
          net.lightapi.portal.market.ServiceRule e0 = (ga0 != null ? ga0.peek() : null);
          if (e0 == null) {
            e0 = new net.lightapi.portal.market.ServiceRule();
          }
          e0.customDecode(in);
          a0.add(e0);
        }
      }

    } else {
      for (int i = 0; i < 6; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (this.EventId == null) {
            this.EventId = new com.networknt.kafka.common.EventId();
          }
          this.EventId.customDecode(in);
          break;

        case 1:
          this.hostId = in.readString();
          break;

        case 2:
          this.serviceId = in.readString();
          break;

        case 3:
          this.endpoint = in.readString();
          break;

        case 4:
          this.ruleType = in.readString();
          break;

        case 5:
          long size0 = in.readArrayStart();
          java.util.List<net.lightapi.portal.market.ServiceRule> a0 = this.rules;
          if (a0 == null) {
            a0 = new SpecificData.Array<net.lightapi.portal.market.ServiceRule>((int)size0, SCHEMA$.getField("rules").schema());
            this.rules = a0;
          } else a0.clear();
          SpecificData.Array<net.lightapi.portal.market.ServiceRule> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<net.lightapi.portal.market.ServiceRule>)a0 : null);
          for ( ; 0 < size0; size0 = in.arrayNext()) {
            for ( ; size0 != 0; size0--) {
              net.lightapi.portal.market.ServiceRule e0 = (ga0 != null ? ga0.peek() : null);
              if (e0 == null) {
                e0 = new net.lightapi.portal.market.ServiceRule();
              }
              e0.customDecode(in);
              a0.add(e0);
            }
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










